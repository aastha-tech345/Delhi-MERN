exports.register = async (req, res) => {
    try {
        const defaultLang = req.headers.currentlang || 'en';
        const data = req.body || {};
        const email = (data.email || '').toLowerCase();

        if (!data.email || !data.password) {
            return res.status(400).json({
                msg: constantString.message[defaultLang].param_missing,
                lang: defaultLang,
                success: false,
                code: 400
            });
        }

        if (!sharedService.validateEmail(email)) {
            return res.status(400).json({
                msg: constantString.message[defaultLang].valid_email,
                lang: defaultLang,
                success: false,
                code: 400
            });
        }

        const user = await User.findByEmailOrUsername(email, '');
        
        if (user) {
            return res.status(400).json({
                msg: constantString.message[defaultLang].email_exist,
                lang: defaultLang,
                success: false,
                code: 400
            });
        }

        const username = email.substring(0, email.lastIndexOf("@"));
        data['username'] = username;
        
        const save = await User.create(data);

        if (!save) {
            return res.status(400).json({
                msg: constantString.message[defaultLang].param_missing,
                lang: defaultLang,
                success: false,
                code: 400
            });
        }

        return res.status(200).json({
            msg: constantString.message[defaultLang].register_success,
            lang: defaultLang,
            success: true,
            userDetails: save,
            code: 200
        });
    } catch (error) {
        return res.status(500).json({
            msg: 'Internal Server Error',
            lang: defaultLang,
            success: false,
            code: 500
        });
    }
};




















const { CustomerSchema } = require('../models/customer.model');

exports.createCustomer = async (req, res) => {
  try {
    const {
      fname,
      lname,
      phone,
      email,
      title,
      gender,
      role, 
      primary_contact,
      contacts,
      tasks,
    } = req.body;

    let defaultValues = {
      coustomerInfo: {
        fname,
        lname,
        gender,
        email,
        phone,
      },
      contacts: {},
      tasks: {},
    };

    if (contacts) {
      defaultValues.contacts = {
        fname: contacts.fname,
        lname: contacts.lname,
        gender: contacts.gender,
        email: contacts.email,
        phone: contacts.phone,
        skype: contacts.skype,
      };
    }

    if (tasks) {
      defaultValues.tasks = {
        title: tasks.title,
        start_date: tasks.start_date,
        deadline: tasks.deadline,
        assigned_to: tasks.assigned_to,
        employees: tasks.employees,
        task_status: tasks.task_status,
      };
    }

    if (role === 'customer') {
      // Find an existing customer and get their _id
      const existingCustomer = await CustomerSchema.Customer.findOne({ role: 'customer' });
      if (existingCustomer) {
        defaultValues = {
          created_by: null,
          customer_id: existingCustomer._id,
        };
      } else {
        return res.status(400).send({ message: 'No existing customer found to link as parent' });
      }
    }

    let userData = {
      fname,
      lname,
      phone,
      email,
      title,
      gender,
      primary_contact,
      ...defaultValues,
    };

    const userInstance = new CustomerSchema.Customer(userData);
    const result = await userInstance.save();

    return res.status(200).send({ message: 'Customer created successfully', data: result });
  } catch (error) {
    console.error(error);
    return res.status(500).send({ message: 'Server Error' });
  }
};
