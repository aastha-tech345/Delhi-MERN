{"version":3,"file":"static/js/719.2525833d.chunk.js","mappings":"8MACO,MAiFMA,EAAgBC,MAAOC,EAAKC,KACvC,IAEE,MAAMC,QAAiBC,EAAAA,EAAAA,GAAM,CAC3BC,OAAQ,OACRJ,MACAK,QAAS,CAEP,eAAgB,uBAElBJ,SAGF,GAAIC,EACF,OAAOA,CAEX,CAAE,MAAOI,GACP,OAAOA,CACT,GAwEWC,EAAeR,MAAOC,EAAKC,KACtC,IACE,MAAMO,EAAQC,aAAaC,QAAQ,SAC7BR,QAAiBC,EAAAA,EAAAA,GAAM,CAC3BC,OAAQ,MACRJ,IAAI,GAADW,OAAKX,GACRK,QAAS,CACPO,cAAc,UAADD,OAAYH,GACzB,eAAgB,oBAElBP,SAGF,GAAIC,EACF,OAAOA,CAEX,CAAE,MAAOI,GAAQ,IAADO,EACd,OAAgC,OAAvB,OAALP,QAAK,IAALA,GAAe,QAAVO,EAALP,EAAOJ,gBAAQ,IAAAW,OAAV,EAALA,EAAiBC,QACZ,IAEAR,EAAMJ,QAEjB,E,gIC1LF,MAAMa,EAAU,CACd,CACEC,MAAO,QACPC,UAAW,iBACXC,OAASC,IAASC,EAAAA,EAAAA,KAAA,KAAAC,SAAIF,KAExB,CACEH,MAAO,gBACPC,UAAW,iBAEb,CACED,MAAO,SACPC,UAAW,SACXC,OAAQA,CAACI,EAAGC,KACVC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAJ,SAAA,EACED,EAAAA,EAAAA,KAACM,EAAAA,IAAM,IAAG,gCAEVN,EAAAA,EAAAA,KAACO,EAAAA,IAAQ,IAAG,kBAQdC,EAAe,CACnBC,SAAUA,CAACC,EAAiBC,KAC1BC,QAAQC,IAAI,oBAADtB,OAAqBmB,GAAmB,iBAAkBC,EAAa,EAEpFG,iBAAmBX,IAAM,CACvBY,SAA0B,kBAAhBZ,EAAOa,KAEjBA,KAAMb,EAAOa,QAIXC,EAAWA,KACf,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,aAC5CC,EAAMC,IAAWF,EAAAA,EAAAA,WAAS,GAC3BG,EAASC,4BAGf,IAAIC,EAAMpC,aAAaC,QAAQ,iBAC3BoC,EAASC,KAAKC,MAAMH,GACxB,MAAO5C,EAAMgD,IAAWT,EAAAA,EAAAA,UAAS,CAC/BU,eAAgB,GAChBC,cAAe,GACfC,YAAaN,EAAOO,OAEfC,EAAiBC,IAAqBf,EAAAA,EAAAA,UAAS,KAC/CgB,EAAgBC,IAAqBjB,EAAAA,EAAAA,UAAS,IAC/CkB,EAAgBC,IACpB,MAAM,KAAEvB,EAAI,MAAEwB,GAAUD,EAAEE,OAC1BZ,EAAQ,IAAKhD,EAAM,CAACmC,GAAOwB,GAAQ,EAE/BE,EAAcA,IAAMpB,GAAQ,GAwB5BqB,EAAahE,UACjB,IACE,MAAM+C,QAAekB,MAAM,GAADrD,OAAIgC,EAAM,2BAC9B1C,QAAa6C,EAAOmB,OAC1BR,EAAkBxD,EACpB,CAAE,MAAOK,GACP0B,QAAQ1B,MAAM,kCAAmCA,EACnD,GAEF,IAAI4D,EAAQV,EAKZ,OAJAW,EAAAA,EAAAA,YAAU,KACRJ,GAAY,GACX,KAGDvC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAJ,SAAA,EACEG,EAAAA,EAAAA,MAAA,OAAK4C,UAAU,MAAK/C,SAAA,EAClBD,EAAAA,EAAAA,KAAA,MAAIgD,UAAU,YAAW/C,SAAC,eAC1BD,EAAAA,EAAAA,KAAA,aAEFI,EAAAA,EAAAA,MAAA,OAAK4C,UAAU,MAAMC,MAAO,CAAEC,OAAQ,sBAAuBC,aAAc,OAAQlD,SAAA,EACjFG,EAAAA,EAAAA,MAAA,OAAK4C,UAAU,WAAU/C,SAAA,EACvBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,yBACJD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,mHAKLD,EAAAA,EAAAA,KAAA,OAAKgD,UAAU,cACf5C,EAAAA,EAAAA,MAAA,OAAK4C,UAAU,gBAAe/C,SAAA,EAC5BG,EAAAA,EAAAA,MAAA,UACEgD,KAAK,SACLJ,UAAU,qBACVC,MAAO,CAAEI,WAAY,WACrBC,QAzDSC,IAAMjC,GAAQ,GAyDHrB,SAAA,EAEpBD,EAAAA,EAAAA,KAACwD,EAAAA,IAAK,CAACP,MAAO,CAAEQ,MAAO,WAAa,8BAGtCrD,EAAAA,EAAAA,MAACsD,EAAAA,EAAK,CAACrC,KAAMA,EAAMsC,OAAQjB,EAAakB,UAAQ,EAAA3D,SAAA,EAC9CD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAA7D,UACvBD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAMK,MAAK,CAAA9D,SAAC,4BAEfG,EAAAA,EAAAA,MAACsD,EAAAA,EAAMM,KAAI,CAAA/D,SAAA,EACTD,EAAAA,EAAAA,KAAA,SAAOiE,QAAQ,QAAOhE,SAAC,WACvBD,EAAAA,EAAAA,KAAA,SACEkE,GAAG,QACHC,UAAQ,EACRnD,KAAK,iBACLwB,MAAO3D,EAAKiD,eACZrB,SAAU6B,EACVc,KAAK,OACLJ,UAAU,kBAEZhD,EAAAA,EAAAA,KAAA,SAAOiE,QAAQ,eAAchE,SAAC,kBAC9BG,EAAAA,EAAAA,MAAA,UACE8D,GAAG,gBACHlD,KAAK,gBACLwB,MAAO3D,EAAKkD,cACZtB,SAAU6B,EACVU,UAAU,eAAc/C,SAAA,EAExBD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,gBACRD,EAAAA,EAAAA,KAAA,UAAQwC,MAAM,MAAKvC,SAAC,YAEtBD,EAAAA,EAAAA,KAAA,SAAOiE,QAAQ,aAAYhE,SAAC,kBAC5BD,EAAAA,EAAAA,KAAA,SACEkE,GAAG,aACHd,KAAK,OACLJ,UAAU,eACVhC,KAAK,kBACLP,SAAW8B,GAAMJ,EAAkBI,EAAEE,OAAO2B,MAAM,UAGtDpE,EAAAA,EAAAA,KAAC0D,EAAAA,EAAMW,OAAM,CAAApE,UACXG,EAAAA,EAAAA,MAAA,OAAK4C,UAAU,eAAc/C,SAAA,EAC3BG,EAAAA,EAAAA,MAAA,UACE4C,UAAU,UACVM,QAASZ,EACTO,MAAO,CAAEI,WAAY,UAAWI,MAAO,SAAUxD,SAAA,CAEhD,IAAI,eAEE,aAETD,EAAAA,EAAAA,KAAA,UACEgD,UAAU,UACVM,QA5GC3E,UACf,IACE4D,EAAE+B,iBACF,MAAMC,EAAS,IAAIC,SACnBD,EAAOE,OAAO,iBAAkB5F,EAAKiD,gBACrCyC,EAAOE,OAAO,gBAAiB5F,EAAKkD,eACpCwC,EAAOE,OAAO,cAAe5F,EAAKmD,aAClCuC,EAAOE,OAAO,kBAAmBvC,GAEjCtB,QAAQC,IAAI0D,GACZ,MAAM3F,EAAG,GAAAW,OAAMgC,EAAM,6BACrBX,QAAQC,IAAIjC,SACWF,EAAAA,EAAAA,IAAcE,EAAK2F,GAC1C7B,IACAC,GAEF,CAAE,MAAOzD,GACP,OAAOA,CACT,GA2Fc+D,MAAO,CAAEI,WAAY,UAAWI,MAAO,SAAUxD,SAClD,6BAQXD,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAKgD,UAAU,MAAK/C,UAClBD,EAAAA,EAAAA,KAAA,OAAKgD,UAAU,YAAW/C,UACxBD,EAAAA,EAAAA,KAAC0E,EAAAA,EAAK,CACJlE,aAAc,CACZ4C,KAAMlC,KACHV,GAELb,QAASA,EACTgF,WAAY7B,UAIjB,EAIP,EAAe8B,EAAAA,KAAW3D,E","sources":["Api.js","views/customer/document/Document.jsx"],"sourcesContent":["import axios from 'axios'\nexport const getFetch = async (url) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'get',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    return error\n  }\n}\nexport const getFetchByLimit = async (url, limit, page) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'GET',\n      url: `${url}/${limit}/${page}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    return error\n  }\n}\nexport const getOneFetch = async (url, id) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'GET',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response?.status === 200) {\n      return await response?.data\n    }\n  } catch (error) {\n    console.log(error)\n    if (error?.response?.status === 401) {\n      return 401\n    }\n    return error\n  }\n}\nexport const postFetch = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'post',\n      url,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    return error\n  }\n}\nexport const postFetchUser = async (url, data) => {\n  try {\n    // const token = localStorage.getItem(\"token\")\n    const response = await axios({\n      method: 'post',\n      url,\n      headers: {\n        // Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data',\n      },\n      data,\n      //   withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    return error\n  }\n}\nexport const patchFetch = async (url, id, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'patch',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response?.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error?.response\n    }\n  }\n}\nexport const putFetch = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const putFetchById = async (url) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const putFetchData = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'put',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      data,\n      // withCredentials: true,\n    })\n    if (response) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error.response\n    }\n  }\n}\nexport const deleteFetch = async (url, id) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'delete',\n      url: `${url}/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      withCredentials: true,\n    })\n    if (response.status === 200) {\n      return response\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    }\n  }\n}\n\nexport const postFetchData = async (url, data) => {\n  try {\n    const token = localStorage.getItem('token')\n    const response = await axios({\n      method: 'post',\n      url: `${url}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      data,\n      withCredentials: true,\n    })\n    if (response) {\n      return response?.data\n    }\n  } catch (error) {\n    if (error?.response?.status === 401) {\n      return 401\n    } else {\n      return error\n    }\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport { MdAdd } from 'react-icons/md'\nimport { Divider, Radio, Table } from 'antd'\nimport { GrEdit } from 'react-icons/gr'\nimport { MdDelete } from 'react-icons/md'\nimport axios from 'axios'\nimport { postFetchUser } from 'src/Api'\nconst columns = [\n  {\n    title: 'Title',\n    dataIndex: 'document_title',\n    render: (text) => <a>{text}</a>,\n  },\n  {\n    title: 'Dokumententyp',\n    dataIndex: 'document_type',\n  },\n  {\n    title: 'AKTION',\n    dataIndex: 'action',\n    render: (_, record) => (\n      <>\n        <GrEdit />\n        &nbsp; Bearbeiten &nbsp;&nbsp;&nbsp;\n        <MdDelete />\n        Löschen\n      </>\n    ),\n  },\n]\n\n// rowSelection object indicates the need for row selection\nconst rowSelection = {\n  onChange: (selectedRowKeys, selectedRows) => {\n    console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows)\n  },\n  getCheckboxProps: (record) => ({\n    disabled: record.name === 'Disabled User',\n    // Column configuration not to be checked\n    name: record.name,\n  }),\n}\n\nconst Document = () => {\n  const [selectionType, setSelectionType] = useState('checkbox')\n  const [show, setShow] = useState(false)\n  const apiUrl = process.env.REACT_APP_API_URL\n  // const [document_type, setDocumentType] = useState()\n  // const [document_title, setDocumentTitle] = useState()\n  let res = localStorage.getItem('customerDatat')\n  let result = JSON.parse(res)\n  const [data, setData] = useState({\n    document_title: '',\n    document_type: '',\n    customer_id: result._id,\n  })\n  const [document_upload, setDocumentUpload] = useState('')\n  const [documentRecord, setDocumentRecord] = useState([])\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setData({ ...data, [name]: value })\n  }\n  const handleClose = () => setShow(false)\n  const handleShow = () => setShow(true)\n\n  const saveData = async (e) => {\n    try {\n      e.preventDefault()\n      const myForm = new FormData()\n      myForm.append('document_title', data.document_title)\n      myForm.append('document_type', data.document_type)\n      myForm.append('customer_id', data.customer_id)\n      myForm.append('document_upload', document_upload)\n\n      console.log(myForm)\n      const url = `${apiUrl}/document/create_document`\n      console.log(url)\n      const response = await postFetchUser(url, myForm)\n      handleClose()\n      getDetails()\n      //console.log('ashishh', response)\n    } catch (error) {\n      return error\n    }\n  }\n\n  const getDetails = async () => {\n    try {\n      const result = await fetch(`${apiUrl}/document/get_document`)\n      const data = await result.json()\n      setDocumentRecord(data)\n    } catch (error) {\n      console.error('Error fetching customer record:', error)\n    }\n  }\n  let dataa = documentRecord\n  useEffect(() => {\n    getDetails()\n  }, [])\n\n  return (\n    <>\n      <div className=\"row\">\n        <h5 className=\"mt-3 mx-3\">Dokumente</h5>\n        <hr />\n      </div>\n      <div className=\"row\" style={{ border: '1px solid lightgray', borderRadius: '5px' }}>\n        <div className=\"col-sm-7\">\n          <h5>Dokumente verwalten</h5>\n          <p>\n            Senden Sie anpassbare Angebote, Vorschläge und Verträge, um Geschäfte schneller\n            abzuschließen.\n          </p>\n        </div>\n        <div className=\"col-sm-2\"></div>\n        <div className=\"col-sm-3 mt-3\">\n          <button\n            type=\"button\"\n            className=\"btn btn text-light\"\n            style={{ background: '#0b5995' }}\n            onClick={handleShow}\n          >\n            <MdAdd style={{ color: 'white' }} />\n            &nbsp; Dokument erstellen\n          </button>\n          <Modal show={show} onHide={handleClose} centered>\n            <Modal.Header closeButton>\n              <Modal.Title>Details zum Dokument</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <label htmlFor=\"title\">Titel</label>\n              <input\n                id=\"title\"\n                required\n                name=\"document_title\"\n                value={data.document_title}\n                onChange={handleChange}\n                type=\"text\"\n                className=\"form-control\"\n              />\n              <label htmlFor=\"documentType\">Documenttype</label>\n              <select\n                id=\"document_type\"\n                name=\"document_type\"\n                value={data.document_type}\n                onChange={handleChange}\n                className=\"form-control\"\n              >\n                <option>--select--</option>\n                <option value=\"pdf\">pdf</option>\n              </select>\n              <label htmlFor=\"fileUpload\">Datei-Upload</label>\n              <input\n                id=\"fileUpload\"\n                type=\"file\"\n                className=\"form-control\"\n                name=\"document_upload\"\n                onChange={(e) => setDocumentUpload(e.target.files[0])}\n              />\n            </Modal.Body>\n            <Modal.Footer>\n              <div className=\"modal-footer\">\n                <button\n                  className=\"btn btn\"\n                  onClick={handleClose}\n                  style={{ background: '#d04545', color: 'white' }}\n                >\n                  {' '}\n                  Abbrechen\n                </button>\n                &nbsp; &nbsp;\n                <button\n                  className=\"btn btn\"\n                  onClick={saveData}\n                  style={{ background: '#0b5995', color: 'white' }}\n                >\n                  Speichern\n                </button>\n              </div>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      </div>\n      <br />\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <Table\n            rowSelection={{\n              type: selectionType,\n              ...rowSelection,\n            }}\n            columns={columns}\n            dataSource={dataa}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default React.memo(Document)\n"],"names":["postFetchUser","async","url","data","response","axios","method","headers","error","putFetchData","token","localStorage","getItem","concat","Authorization","_error$response3","status","columns","title","dataIndex","render","text","_jsx","children","_","record","_jsxs","_Fragment","GrEdit","MdDelete","rowSelection","onChange","selectedRowKeys","selectedRows","console","log","getCheckboxProps","disabled","name","Document","selectionType","setSelectionType","useState","show","setShow","apiUrl","process","res","result","JSON","parse","setData","document_title","document_type","customer_id","_id","document_upload","setDocumentUpload","documentRecord","setDocumentRecord","handleChange","e","value","target","handleClose","getDetails","fetch","json","dataa","useEffect","className","style","border","borderRadius","type","background","onClick","handleShow","MdAdd","color","Modal","onHide","centered","Header","closeButton","Title","Body","htmlFor","id","required","files","Footer","preventDefault","myForm","FormData","append","Table","dataSource","React"],"sourceRoot":""}