{"version":3,"file":"static/js/703.92460635.chunk.js","mappings":"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","sources":["views/customer/Date.jsx","views/customer/bills/Bills.jsx"],"sourcesContent":["// import React, { useState } from 'react'\n// import DatePicker from 'react-datepicker'\n\n// import 'react-datepicker/dist/react-datepicker.css'\n\n// // CSS Modules, react-datepicker-cssmodules.css\n// // import 'react-datepicker/dist/react-datepicker-cssmodules.css';\n\n// export default const Date = () => {\n//   const [startDate, setStartDate] = useState(new Date())\n//   return <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} />\n// }\n\nimport React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport PropTypes from 'prop-types'\n\nconst DatePiker = ({ onChange, selected }) => {\n  DatePiker.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    selected: PropTypes.func.isRequired,\n  }\n  // const [startDate, setStartDate] = useState(null)\n\n  useEffect(() => {\n    // setStartDate(new Date())\n  }, []) // Empty dependency array ensures this effect runs only once\n\n  return (\n    <div>\n      <DatePicker\n        className=\"form-control form-search-control w-101\"\n        placeholderText=\"Geburtsdatum\"\n        selected={selected}\n        onChange={onChange}\n        dateFormat=\"dd.MM.yyyy\"\n      />\n    </div>\n  )\n}\n\nexport default DatePiker\n","import React, { useEffect, useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Customer from '../Customer'\nimport { useNavigate } from 'react-router-dom'\nimport Select from 'react-select'\nimport DatePiker from '../Date'\n\nconst Bills = () => {\n  let res = localStorage.getItem('customerRecord')\n  let result = JSON.parse(res)\n  console.log('aastha', result._id)\n  const navigate = useNavigate()\n  const apiUrl = process.env.REACT_APP_API_URL\n  const [employeeData, setEmployeeData] = useState([])\n  const [customerInfo, setCustomerInfo] = useState([])\n  const [colleague, setColleague] = useState('')\n  const [invoiceDate, setInvoiceDate] = useState('')\n  const [deliveryDate, setDeliveryDate] = useState('')\n  const [product, setProduct] = useState('')\n  const [paymentMethod, setPaymentMethod] = useState('')\n  const [invoiceAmount, setInvoiceAmount] = useState('')\n  let paidData = customerInfo?.customerDelivery?.alreadyPaid\n  // console.log('paidData', paidData)\n  const [alreadyPaid, setAlreadyPaid] = useState(paidData)\n  const invoiceChange = (e) => {\n    setInvoiceDate(e)\n  }\n\n  const deliveryDateChange = (date) => {\n    setDeliveryDate(date)\n  }\n\n  const cancelData = () => {\n    localStorage.removeItem('customerRecord')\n    navigate('/customer/customer_info')\n  }\n  const alreadypaidChange = (e) => {\n    setAlreadyPaid(e.target.checked)\n  }\n\n  const saveData = async () => {\n    try {\n      const data = {\n        product,\n        alreadyPaid,\n        paymentMethod,\n        invoiceAmount,\n        invoiceDate,\n        deliveryDate,\n        employeeData,\n        colleague,\n      }\n\n      const response = await fetch(`${apiUrl}/invoice/create_invoice`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`)\n      }\n\n      toast.success('Rechnungsdaten erfolgreich gespeichert')\n      setColleague('')\n      setInvoiceDate('')\n      setProduct('')\n      setPaymentMethod('')\n      setInvoiceAmount('')\n      setDeliveryDate('')\n      setProduct('')\n    } catch (error) {\n      toast.error('Bitte füllen Sie alle Angaben aus')\n      console.error('Error during API call:', error)\n    }\n  }\n\n  const option = [\n    { value: 'barzahlung', label: 'Barzahlung' },\n    { value: 'rechnung', label: 'Rechnung' },\n    { value: 'payPal', label: 'PayPal' },\n    { value: 'klarna', label: 'Klarna' },\n    { value: 'kreditkarte', label: 'Kreditkarte (für die Zukunft)' },\n    { value: 'andere', label: 'Andere' },\n  ]\n\n  const optionData = [\n    { value: 'HVD-PV', label: 'HVD-PV' },\n    { value: 'Vortrag', label: 'Vortrag' },\n    { value: 'SPV', label: 'SPV' },\n    { value: 'OPV', label: 'OPV' },\n  ]\n\n  const getEmployeeData = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/user/get/employeeData`)\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`)\n      }\n      const { data } = await response.json()\n      setEmployeeData(data)\n    } catch (error) {\n      console.error('Error fetching employee data:', error)\n    }\n  }\n  const getCustomerInfo = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/customer/get_record/${result._id}`)\n\n      const data = await response.json()\n      console.log('data', data)\n      setCustomerInfo(data)\n    } catch (error) {\n      console.error('Error fetching employee data:', error)\n    }\n  }\n  // console.log('first', customerInfo?.customerDelivery?.alreadyPaid)\n  useEffect(() => {\n    getCustomerInfo()\n    getEmployeeData()\n    setAlreadyPaid(paidData)\n  }, [paidData])\n\n  return (\n    <div className=\"inner-page-wrap\">\n      <div style={{ background: '#fff' }}>\n        <Customer />\n        <div className=\"tab-content\">\n          <div className=\"tab-title\">\n            <h4>Rechnung</h4>\n          </div>\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <div className=\"block-wrap\">\n                  <h3>Rechnungstellung</h3>\n                  <div className=\"container-fluid\">\n                    <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                        <div className=\"row mb-3\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Produkt\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              options={optionData}\n                              onChange={(selectedOption) => setProduct(selectedOption?.value || '')}\n                              value={optionData.find((opt) => opt.value === product)}\n                              name=\"product\"\n                              placeholder=\"HVD-PV\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row mb-3\">\n                          <label htmlFor=\"paymentMethod\" className=\"col-sm-4 col-form-label\">\n                            Zahlungsart\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              options={option}\n                              onChange={(selectedOption) =>\n                                setPaymentMethod(selectedOption?.value || '')\n                              }\n                              value={option.find((opt) => opt.value === paymentMethod)}\n                              name=\"paymentMethod\"\n                              placeholder=\"Barzahlung\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"invoiceDate\" className=\"col-sm-4 col-form-label\">\n                            Rechnungsdatum\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <DatePiker\n                              className=\"form-control\"\n                              selected={invoiceDate || '10.10.23'}\n                              onChange={invoiceChange}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"colleague\" className=\"col-sm-4 col-form-label\">\n                            MitarbeiterInnen\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              placeholder=\"MitarbeiterInnen\"\n                              options={\n                                employeeData?.map((elem) => ({\n                                  value: elem.username,\n                                  label: elem.username,\n                                })) || []\n                              }\n                              onChange={(selectedOption) =>\n                                setColleague(selectedOption?.value || '')\n                              }\n                              value={{\n                                value: colleague || 'MitarbeiterInnen',\n                                label: colleague || 'MitarbeiterInnen',\n                              }}\n                              name=\"colleague\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-sm-6\">\n                        {/* <div className=\"mb-6 row\">\n                          <label htmlFor=\"alreadyPaid\" className=\"col-sm-4 col-form-label\">\n                            Bereits bezahlt\n                          </label>\n                          <div className=\"col-sm-6 radio-check-wrap\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"alreadyPaid\"\n                              checked={alreadyPaid}\n                              onChange={(e) => setAlreadyPaid(e.target.checked)}\n                            />\n                          </div>\n                        </div> */}\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"alreadyPaid\" className=\"col-sm-4 mb-2 col-form-label\">\n                            Bereits bezahlt\n                          </label>\n                          <div className=\"col-sm-6 radio-check-wrap\">\n                            <input\n                              readOnly\n                              type=\"checkbox\"\n                              name=\"alreadyPaid\"\n                              checked={alreadyPaid}\n                              onChange={alreadypaidChange}\n                              onClick={(e) => e.stopPropagation()}\n                            />\n                            <span></span>\n                          </div>\n                        </div>\n                        <div className=\"row\">\n                          <label htmlFor=\"invoiceAmount\" className=\"col-sm-4 col-form-label\">\n                            Rechnungsbetrag eintragen\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              type=\"text\"\n                              placeholder=\"Rechnungsbetrag eintragen\"\n                              className=\"form-control\"\n                              name=\"invoiceAmount\"\n                              value={invoiceAmount}\n                              onChange={(e) => {\n                                const value = e.target.value\n                                const sanitizedValue = value.replace(/\\D/g, '')\n                                setInvoiceAmount(sanitizedValue)\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row\">\n                          <label htmlFor=\"deliveryDate\" className=\"col-sm-4 col-form-label\">\n                            Lieferdatum\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <DatePiker\n                              className=\"form-control\"\n                              selected={deliveryDate || '10.10.23'}\n                              onChange={deliveryDateChange}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-end mx-3\">\n            <button\n              type=\"button\"\n              onClick={cancelData}\n              className=\"btn btn\"\n              style={{ background: '#d04545', color: 'white' }}\n            >\n              Abbrechen\n            </button>\n            &nbsp; &nbsp;\n            <button\n              onClick={saveData}\n              type=\"button\"\n              style={{ background: '#0b5995', color: 'white' }}\n              className=\"btn btn\"\n            >\n              Speichern\n            </button>\n          </div>\n          <br />\n          <ToastContainer />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(Bills)\n"],"names":["_ref","onChange","selected","useEffect","_jsx","children","DatePicker","className","placeholderText","dateFormat","Bills","_customerInfo$custome","res","localStorage","getItem","result","JSON","parse","console","log","_id","navigate","useNavigate","apiUrl","process","employeeData","setEmployeeData","useState","customerInfo","setCustomerInfo","colleague","setColleague","invoiceDate","setInvoiceDate","deliveryDate","setDeliveryDate","product","setProduct","paymentMethod","setPaymentMethod","invoiceAmount","setInvoiceAmount","paidData","customerDelivery","alreadyPaid","setAlreadyPaid","option","value","label","optionData","async","response","fetch","concat","data","json","error","getCustomerInfo","ok","Error","status","getEmployeeData","_jsxs","style","background","Customer","htmlFor","Select","options","selectedOption","find","opt","name","placeholder","DatePiker","e","map","elem","username","readOnly","type","checked","target","onClick","stopPropagation","sanitizedValue","replace","date","cancelData","removeItem","color","method","headers","body","stringify","toast","success","ToastContainer","React"],"sourceRoot":""}