{"version":3,"file":"static/js/703.19f60461.chunk.js","mappings":"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","sources":["views/customer/Date.jsx","views/customer/bills/Bills.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function DatePicker({ onChange, value, placeholder }) {\n  const [inputValue, setInputValue] = useState('')\n\n  useEffect(() => {\n    if (typeof value === 'string') {\n      const parsedDate = new Date(value)\n      if (!isNaN(parsedDate.getTime())) {\n        setInputValue(formatDate(parsedDate))\n      } else {\n        setInputValue('')\n      }\n    } else if (value instanceof Date && !isNaN(value.getTime())) {\n      setInputValue(formatDate(value))\n    } else {\n      setInputValue('')\n    }\n  }, [value])\n\n  // const handleInputChange = (e) => {\n  //   let inputValue = e.target?.value\n  //   let formattedValue = ''\n\n  //   inputValue = inputValue?.replace(/\\D/g, '')\n\n  //   for (let i = 0; i < inputValue?.length; i++) {\n  //     if (i === 2 || i === 4) {\n  //       formattedValue += '.'\n  //     }\n  //     formattedValue += inputValue[i]\n  //   }\n\n  //   setInputValue(formattedValue)\n  // }\n  const handleInputChange = (e) => {\n    let inputValue = e.target?.value\n    let formattedValue = ''\n\n    inputValue = inputValue?.replace(/\\D/g, '')\n\n    if (inputValue?.length > 8) {\n      inputValue = inputValue.slice(0, 8)\n    }\n\n    for (let i = 0; i < inputValue?.length; i++) {\n      if (i === 2 || i === 4) {\n        formattedValue += '.'\n      }\n      formattedValue += inputValue[i]\n    }\n\n    setInputValue(formattedValue)\n  }\n\n  const handleDateChange = (e) => {\n    const parts = inputValue?.split('.')?.map((part) => parseInt(part, 10))\n    let [day, month, year] = parts\n    if (parts?.length === 3) {\n      if (year < 100) {\n        year += 1900\n      } else if (year >= 2000 && year <= new Date().getFullYear()) {\n      } else {\n        year = year\n      }\n\n      const newDate = new Date(year, month - 1, day)\n      onChange(newDate)\n    } else if (parts?.length === 1) {\n      const year = parts[0]\n      if (year < 100) {\n        let fullYear\n        if (year < 50) {\n          fullYear = year + 2000\n        } else {\n          fullYear = year + 1900\n        }\n        const newDate = new Date(fullYear, 0, 1)\n        onChange(newDate)\n      }\n    }\n  }\n\n  const formatDate = (date) => {\n    const day = date?.getDate()?.toString()?.padStart(2, '0')\n    const month = (date?.getMonth() + 1)?.toString()?.padStart(2, '0')\n    const year = date?.getFullYear()?.toString()\n    return `${day}.${month}.${year}`\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        onChange={handleInputChange}\n        onBlur={handleDateChange}\n        value={inputValue}\n        placeholder={placeholder}\n        className=\"form-control\"\n      />\n    </div>\n  )\n}\n\nDatePicker.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.instanceOf(Date).isRequired,\n  placeholder: PropTypes.string.isRequired,\n}\n","import React, { useEffect, useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Customer from '../Customer'\nimport { useNavigate } from 'react-router-dom'\nimport Select from 'react-select'\nimport DatePiker from '../Date'\n\nconst Bills = () => {\n  const [recordData, setRecordData] = useState([])\n  let res = localStorage.getItem('customerRecord')\n  let resultt = JSON.parse(res)\n  const navigate = useNavigate()\n  const apiUrl = process.env.REACT_APP_API_URL\n  const [employeeData, setEmployeeData] = useState([])\n  const [customerInfo, setCustomerInfo] = useState([])\n  const [colleague, setColleague] = useState(recordData?.colleague)\n  const [invoiceDate, setInvoiceDate] = useState(recordData?.invoiceDate)\n  const [deliveryDate, setDeliveryDate] = useState(recordData?.deliveryDate)\n  const [product, setProduct] = useState(recordData?.product)\n  const [incoming_payment, setIncomingPayment] = useState('')\n  const [paymentMethod, setPaymentMethod] = useState(recordData?.paymentMethod)\n  const [invoiceAmount, setInvoiceAmount] = useState(recordData?.invoiceAmount)\n  const [transaction_no, setTransactionNo] = useState()\n  let paidData = customerInfo?.customerDelivery?.alreadyPaid\n  const [alreadyPaid, setAlreadyPaid] = useState(paidData)\n  const invoiceChange = (e) => {\n    setInvoiceDate(e)\n  }\n\n  const deliveryDateChange = (date) => {\n    setDeliveryDate(date)\n  }\n\n  const cancelData = () => {\n    localStorage.removeItem('customerRecord')\n    navigate('/customer/customer_info')\n  }\n  const alreadypaidChange = (e) => {\n    setAlreadyPaid(e.target.checked)\n  }\n\n  const handlePaymentChange = (selectedOption) => {\n    setPaymentMethod(selectedOption?.value || '')\n  }\n\n  const saveData = async () => {\n    try {\n      const data = {\n        product,\n        alreadyPaid,\n        paymentMethod,\n        invoiceAmount,\n        invoiceDate,\n        deliveryDate,\n        employeeData,\n        colleague,\n        transaction_no,\n        incoming_payment,\n        customer_id: resultt?._id,\n      }\n\n      const response = await fetch(`${apiUrl}/invoice/get_invoice/${resultt?._id}`, {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`)\n      }\n      const responseData = await response.json()\n      window.localStorage.setItem('alradyPaid', responseData.data.alreadyPaid)\n      toast.success('Rechnungsdaten erfolgreich gespeichert')\n    } catch (error) {\n      toast.error('Bitte füllen Sie alle Angaben aus')\n    }\n  }\n\n  const option = [\n    { value: 'payPal', label: 'PayPal' },\n    { value: 'barzahlung', label: 'Barzahlung' },\n    { value: 'rechnung', label: 'Rechnung' },\n    { value: 'klarna', label: 'Klarna' },\n    { value: 'kreditkarte', label: 'Kreditkarte (für die Zukunft)' },\n    { value: 'andere', label: 'Andere' },\n  ]\n\n  const optionData = [\n    { value: 'HVD-PV', label: 'HVD-PV' },\n    { value: 'Vortrag', label: 'Vortrag' },\n    { value: 'SPV', label: 'SPV' },\n    { value: 'OPV', label: 'OPV' },\n  ]\n\n  const getEmployeeData = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/user/get/employeeData`)\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`)\n      }\n      const { data } = await response.json()\n      setEmployeeData(data)\n    } catch (error) {\n      console.error('Error fetching employee data:', error)\n    }\n  }\n  const getCustomerInfo = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/customer/get_record/${resultt._id}`)\n\n      const data = await response.json()\n      // console.log('data', data)\n      setCustomerInfo(data)\n    } catch (error) {\n      console.error('Error fetching employee data:', error)\n    }\n  }\n\n  const getRecord = async () => {\n    try {\n      const result = await fetch(`${apiUrl}/invoice/get_invoice/${resultt._id}`)\n      const data = await result.json()\n      setRecordData(data)\n    } catch (error) {\n      console.error('Error fetching customer record:', error)\n    }\n  }\n  // console.log('recorddata', recordData)\n  // console.log('first', customerInfo?.customerDelivery?.alreadyPaid)\n  useEffect(() => {\n    getRecord()\n    getCustomerInfo()\n    getEmployeeData()\n    setAlreadyPaid()\n  }, [])\n\n  useEffect(() => {\n    setColleague(recordData?.colleague)\n    setInvoiceDate(recordData?.invoiceDate)\n    setDeliveryDate(recordData?.deliveryDate)\n    setProduct(recordData?.product)\n    setPaymentMethod(recordData?.paymentMethod)\n    setInvoiceAmount(recordData?.invoiceAmount)\n    setIncomingPayment(recordData?.incoming_payment)\n    setTransactionNo(recordData?.transaction_no)\n  }, [recordData])\n  useEffect(() => {\n    if (incoming_payment && incoming_payment.length !== 0) {\n      setAlreadyPaid(true)\n    } else {\n      setAlreadyPaid(paidData === true)\n    }\n  }, [incoming_payment, paidData])\n\n  return (\n    <div className=\"inner-page-wrap\">\n      <div style={{ background: '#fff' }}>\n        <Customer />\n        <div className=\"tab-content\">\n          <div className=\"tab-title\">\n            <h4 className=\"mx-3\">Rechnung</h4>\n          </div>\n          <hr className=\"mx-3\" />\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <div className=\"block-wrap\">\n                  {/* <h3>Rechnungstellung</h3> */}\n                  <div className=\"container-fluid\">\n                    <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                        <div className=\"row\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Transaktionsnr\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              className=\"form-control\"\n                              value={transaction_no}\n                              onChange={(e) => {\n                                setTransactionNo(e.target.value)\n                              }}\n                              disabled\n                              placeholder=\"Transaktionsnr\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-sm-6\">\n                        <div className=\"row\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Zahlungseingang\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              className=\"form-control\"\n                              placeholder=\"Zahlungseingang\"\n                              value={incoming_payment}\n                              onChange={(e) => {\n                                setIncomingPayment(e.target.value)\n                              }}\n                              disabled={paymentMethod !== 'barzahlung'}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                        <div className=\"row mb-3\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Produkt\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              options={optionData}\n                              onChange={(selectedOption) => setProduct(selectedOption?.value || '')}\n                              value={optionData.find((opt) => opt.value === product)}\n                              name=\"product\"\n                              placeholder=\"HVD-PV\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row\">\n                          <label htmlFor=\"invoiceAmount\" className=\"col-sm-4 col-form-label\">\n                            Rechnungsbetrag eintragen\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              type=\"text\"\n                              placeholder=\"Rechnungsbetrag eintragen\"\n                              className=\"form-control\"\n                              name=\"invoiceAmount\"\n                              value={invoiceAmount}\n                              onChange={(e) => {\n                                const value = e.target.value\n                                const sanitizedValue = value.replace(/\\D/g, '')\n                                setInvoiceAmount(sanitizedValue)\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"invoiceDate\" className=\"col-sm-4 col-form-label\">\n                            Rechnungsdatum\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <DatePiker\n                              value={invoiceDate}\n                              onChange={invoiceChange}\n                              placeholder=\"Rechnungsdatum\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"colleague\" className=\"col-sm-4 col-form-label\">\n                            MitarbeiterInnen\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              placeholder=\"MitarbeiterInnen\"\n                              options={\n                                employeeData?.map((elem) => ({\n                                  value: elem.username,\n                                  label: elem.username,\n                                })) || []\n                              }\n                              onChange={(selectedOption) =>\n                                setColleague(selectedOption?.value || '')\n                              }\n                              value={{\n                                value: colleague || 'MitarbeiterInnen',\n                                label: colleague || 'MitarbeiterInnen',\n                              }}\n                              name=\"colleague\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-sm-6\">\n                        {/* <div className=\"mb-6 row\">\n                          <label htmlFor=\"alreadyPaid\" className=\"col-sm-4 col-form-label\">\n                            Bereits bezahlt\n                          </label>\n                          <div className=\"col-sm-6 radio-check-wrap\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"alreadyPaid\"\n                              checked={alreadyPaid}\n                              onChange={(e) => setAlreadyPaid(e.target.checked)}\n                            />\n                          </div>\n                        </div> */}\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"alreadyPaid\" className=\"col-sm-4 mb-2 col-form-label\">\n                            Bereits bezahlt\n                          </label>\n                          <div className=\"col-sm-6 radio-check-wrap\">\n                            <input\n                              readOnly\n                              type=\"checkbox\"\n                              name=\"alreadyPaid\"\n                              checked={alreadyPaid}\n                              onChange={alreadypaidChange}\n                              onClick={(e) => e.stopPropagation()}\n                            />\n                            <span></span>\n                          </div>\n                        </div>\n                        <div className=\"row mb-3\">\n                          <label htmlFor=\"paymentMethod\" className=\"col-sm-4 col-form-label\">\n                            Zahlungsart\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              options={option}\n                              onChange={handlePaymentChange}\n                              value={option.find((opt) => opt.value === paymentMethod)}\n                              name=\"paymentMethod\"\n                              placeholder=\"Barzahlung\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"row\">\n                          <label htmlFor=\"deliveryDate\" className=\"col-sm-4 col-form-label\">\n                            Lieferdatum\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <DatePiker\n                              value={deliveryDate}\n                              onChange={deliveryDateChange}\n                              placeholder=\"Lieferdatum\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-end mx-3\">\n            <button\n              type=\"button\"\n              onClick={cancelData}\n              className=\"btn btn\"\n              style={{ background: '#d04545', color: 'white' }}\n            >\n              Abbrechen\n            </button>\n            &nbsp; &nbsp;\n            <button\n              onClick={saveData}\n              type=\"button\"\n              style={{ background: '#0b5995', color: 'white' }}\n              className=\"btn btn\"\n            >\n              Speichern\n            </button>\n          </div>\n          <br />\n          <ToastContainer />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(Bills)\n"],"names":["DatePicker","_ref","onChange","value","placeholder","inputValue","setInputValue","useState","useEffect","parsedDate","Date","isNaN","getTime","formatDate","date","_date$getDate","_date$getDate$toStrin","_ref2","_ref2$toString","_date$getFullYear","day","getDate","toString","padStart","month","getMonth","year","getFullYear","concat","_jsx","children","type","e","_e$target","_inputValue","_inputValue2","target","formattedValue","replace","length","slice","i","_inputValue3","onBlur","_inputValue$split","parts","split","map","part","parseInt","newDate","fullYear","className","Bills","_customerInfo$custome","recordData","setRecordData","res","localStorage","getItem","resultt","JSON","parse","navigate","useNavigate","apiUrl","process","employeeData","setEmployeeData","customerInfo","setCustomerInfo","colleague","setColleague","invoiceDate","setInvoiceDate","deliveryDate","setDeliveryDate","product","setProduct","incoming_payment","setIncomingPayment","paymentMethod","setPaymentMethod","invoiceAmount","setInvoiceAmount","transaction_no","setTransactionNo","paidData","customerDelivery","alreadyPaid","setAlreadyPaid","option","label","optionData","async","result","fetch","_id","data","json","error","console","getRecord","response","getCustomerInfo","ok","Error","status","getEmployeeData","_jsxs","style","background","Customer","htmlFor","disabled","Select","options","selectedOption","find","opt","name","sanitizedValue","DatePiker","elem","username","readOnly","checked","onClick","stopPropagation","cancelData","removeItem","color","customer_id","method","headers","body","stringify","responseData","window","setItem","toast","success","ToastContainer","React"],"sourceRoot":""}