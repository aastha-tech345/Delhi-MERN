{"version":3,"file":"static/js/5703.19d9160e.chunk.js","mappings":"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","sources":["views/customer/Date.jsx","views/customer/bills/Bills.jsx"],"sourcesContent":["// import React from 'react'\n// import DatePicker from 'react-datepicker'\n// import 'react-datepicker/dist/react-datepicker.css'\n// import PropTypes from 'prop-types'\n\n// const DatePiker = ({ onChange, selected, placeholderText }) => {\n//   DatePiker.propTypes = {\n//     onChange: PropTypes.func.isRequired,\n//     selected: PropTypes.func.isRequired,\n//     placeholderText: PropTypes.func.isRequired,\n//   }\n\n//   return (\n//     <div>\n//       <DatePicker\n//         className=\"form-control form-search-control w-101\"\n//         placeholderText={placeholderText}\n//         selected={selected}\n//         onChange={onChange}\n//         dateFormat=\"dd.MM.yyyy\"\n//       />\n//     </div>\n//   )\n// }\n\n// export default DatePiker\nimport React from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport PropTypes from 'prop-types'\n\nconst DatePiker = ({ onChange, selected, placeholderText }) => {\n  DatePiker.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    selected: PropTypes.instanceOf(Date).isRequired,\n    placeholderText: PropTypes.string.isRequired,\n  }\n\n  const handleDateChange = (date) => {\n    let day = date.getDate()\n    let month = date.getMonth() + 1\n    let year = date.getFullYear() % 100\n\n    year += year < 50 ? 2000 : 1900\n    day = day.toString().padStart(2, '0')\n    month = month.toString().padStart(2, '0')\n    const parsedDate = new Date(year, month - 1, day)\n\n    onChange(parsedDate)\n  }\n\n  return (\n    <div>\n      <DatePicker\n        className=\"form-control form-search-control w-101\"\n        placeholderText={placeholderText}\n        selected={selected}\n        onChange={handleDateChange}\n        dateFormat=\"dd.MM.yyyy\"\n      />\n    </div>\n  )\n}\n\nexport default DatePiker\n","import React, { useEffect, useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Customer from '../Customer'\nimport { useNavigate } from 'react-router-dom'\nimport Select from 'react-select'\nimport DatePiker from '../Date'\n\nconst Bills = () => {\n  const [recordData, setRecordData] = useState([])\n  let res = localStorage.getItem('customerRecord')\n  let resultt = JSON.parse(res)\n  // console.log('first', resultt?._id)\n  // console.log('invoice', recordData?.colleague)\n  const navigate = useNavigate()\n  const apiUrl = process.env.REACT_APP_API_URL\n  const [employeeData, setEmployeeData] = useState([])\n  const [customerInfo, setCustomerInfo] = useState([])\n  const [colleague, setColleague] = useState(recordData?.colleague)\n  const [invoiceDate, setInvoiceDate] = useState(recordData?.invoiceDate)\n  const [deliveryDate, setDeliveryDate] = useState(recordData?.deliveryDate)\n  const [product, setProduct] = useState(recordData?.product)\n  const [paymentMethod, setPaymentMethod] = useState(recordData?.paymentMethod)\n  const [invoiceAmount, setInvoiceAmount] = useState(recordData?.invoiceAmount)\n  let paidData = customerInfo?.customerDelivery?.alreadyPaid\n  // console.log('paidData', paidData)\n  const [alreadyPaid, setAlreadyPaid] = useState(paidData)\n  const invoiceChange = (e) => {\n    setInvoiceDate(e)\n  }\n\n  const deliveryDateChange = (date) => {\n    setDeliveryDate(date)\n  }\n\n  const cancelData = () => {\n    localStorage.removeItem('customerRecord')\n    navigate('/customer/customer_info')\n  }\n  const alreadypaidChange = (e) => {\n    setAlreadyPaid(e.target.checked)\n  }\n\n  const saveData = async () => {\n    try {\n      const data = {\n        product,\n        alreadyPaid,\n        paymentMethod,\n        invoiceAmount,\n        invoiceDate,\n        deliveryDate,\n        employeeData,\n        colleague,\n        customer_id: resultt?._id,\n      }\n\n      const response = await fetch(`${apiUrl}/invoice/get_invoice/${resultt?._id}`, {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`)\n      }\n\n      toast.success('Rechnungsdaten erfolgreich gespeichert')\n    } catch (error) {\n      toast.error('Bitte füllen Sie alle Angaben aus')\n      // console.error('Error during API call:', error)\n    }\n  }\n\n  const option = [\n    { value: 'payPal', label: 'PayPal' },\n    // { value: 'barzahlung', label: 'Barzahlung' },\n    // { value: 'rechnung', label: 'Rechnung' },\n    { value: 'klarna', label: 'Klarna' },\n    { value: 'kreditkarte', label: 'Kreditkarte (für die Zukunft)' },\n    // { value: 'andere', label: 'Andere' },\n  ]\n\n  const optionData = [\n    { value: 'HVD-PV', label: 'HVD-PV' },\n    { value: 'Vortrag', label: 'Vortrag' },\n    { value: 'SPV', label: 'SPV' },\n    { value: 'OPV', label: 'OPV' },\n  ]\n\n  const getEmployeeData = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/user/get/employeeData`)\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`)\n      }\n      const { data } = await response.json()\n      setEmployeeData(data)\n    } catch (error) {\n      console.error('Error fetching employee data:', error)\n    }\n  }\n  const getCustomerInfo = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/customer/get_record/${resultt._id}`)\n\n      const data = await response.json()\n      // console.log('data', data)\n      setCustomerInfo(data)\n    } catch (error) {\n      console.error('Error fetching employee data:', error)\n    }\n  }\n\n  const getRecord = async () => {\n    try {\n      const result = await fetch(`${apiUrl}/invoice/get_invoice/${resultt._id}`)\n      const data = await result.json()\n      setRecordData(data)\n    } catch (error) {\n      console.error('Error fetching customer record:', error)\n    }\n  }\n  // console.log('recorddata', recordData)\n  // console.log('first', customerInfo?.customerDelivery?.alreadyPaid)\n  useEffect(() => {\n    getRecord()\n    getCustomerInfo()\n    getEmployeeData()\n    setAlreadyPaid(paidData)\n  }, [paidData])\n\n  useEffect(() => {\n    setColleague(recordData?.colleague)\n    setInvoiceDate(recordData?.invoiceDate)\n    setDeliveryDate(recordData?.deliveryDate)\n    setProduct(recordData?.product)\n    setPaymentMethod(recordData?.paymentMethod)\n    setInvoiceAmount(recordData?.invoiceAmount)\n  }, [recordData])\n\n  return (\n    <div className=\"inner-page-wrap\">\n      <div style={{ background: '#fff' }}>\n        <Customer />\n        <div className=\"tab-content\">\n          <div className=\"tab-title\">\n            <h4 className=\"mx-3\">Rechnung</h4>\n          </div>\n          <hr className=\"mx-3\" />\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <div className=\"block-wrap\">\n                  {/* <h3>Rechnungstellung</h3> */}\n                  <div className=\"container-fluid\">\n                    <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                        <div className=\"row\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Transaktionsnr\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input className=\"form-control\" disabled placeholder=\"Transaktionsnr\" />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-sm-6\">\n                        <div className=\"row\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Zahlungseingang\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              className=\"form-control\"\n                              disabled\n                              placeholder=\"Zahlungseingang\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                        <div className=\"row mb-3\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Produkt\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              options={optionData}\n                              onChange={(selectedOption) => setProduct(selectedOption?.value || '')}\n                              value={optionData.find((opt) => opt.value === product)}\n                              name=\"product\"\n                              placeholder=\"HVD-PV\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row\">\n                          <label htmlFor=\"invoiceAmount\" className=\"col-sm-4 col-form-label\">\n                            Rechnungsbetrag eintragen\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              type=\"text\"\n                              placeholder=\"Rechnungsbetrag eintragen\"\n                              className=\"form-control\"\n                              name=\"invoiceAmount\"\n                              value={invoiceAmount}\n                              onChange={(e) => {\n                                const value = e.target.value\n                                const sanitizedValue = value.replace(/\\D/g, '')\n                                setInvoiceAmount(sanitizedValue)\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"invoiceDate\" className=\"col-sm-4 col-form-label\">\n                            Rechnungsdatum\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <DatePiker\n                              className=\"form-control\"\n                              selected={invoiceDate}\n                              onChange={invoiceChange}\n                              placeholderText={'Rechnungsdatum'}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"colleague\" className=\"col-sm-4 col-form-label\">\n                            MitarbeiterInnen\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              placeholder=\"MitarbeiterInnen\"\n                              options={\n                                employeeData?.map((elem) => ({\n                                  value: elem.username,\n                                  label: elem.username,\n                                })) || []\n                              }\n                              onChange={(selectedOption) =>\n                                setColleague(selectedOption?.value || '')\n                              }\n                              value={{\n                                value: colleague || 'MitarbeiterInnen',\n                                label: colleague || 'MitarbeiterInnen',\n                              }}\n                              name=\"colleague\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-sm-6\">\n                        {/* <div className=\"mb-6 row\">\n                          <label htmlFor=\"alreadyPaid\" className=\"col-sm-4 col-form-label\">\n                            Bereits bezahlt\n                          </label>\n                          <div className=\"col-sm-6 radio-check-wrap\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"alreadyPaid\"\n                              checked={alreadyPaid}\n                              onChange={(e) => setAlreadyPaid(e.target.checked)}\n                            />\n                          </div>\n                        </div> */}\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"alreadyPaid\" className=\"col-sm-4 mb-2 col-form-label\">\n                            Bereits bezahlt\n                          </label>\n                          <div className=\"col-sm-6 radio-check-wrap\">\n                            <input\n                              readOnly\n                              type=\"checkbox\"\n                              name=\"alreadyPaid\"\n                              checked={alreadyPaid}\n                              onChange={alreadypaidChange}\n                              onClick={(e) => e.stopPropagation()}\n                            />\n                            <span></span>\n                          </div>\n                        </div>\n                        <div className=\"row mb-3\">\n                          <label htmlFor=\"paymentMethod\" className=\"col-sm-4 col-form-label\">\n                            Zahlungsart\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              options={option}\n                              onChange={(selectedOption) =>\n                                setPaymentMethod(selectedOption?.value || '')\n                              }\n                              value={option.find((opt) => opt.value === paymentMethod)}\n                              name=\"paymentMethod\"\n                              placeholder=\"Barzahlung\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"row\">\n                          <label htmlFor=\"deliveryDate\" className=\"col-sm-4 col-form-label\">\n                            Lieferdatum\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <DatePiker\n                              className=\"form-control\"\n                              selected={deliveryDate}\n                              onChange={deliveryDateChange}\n                              placeholderText={'Lieferdatum'}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-end mx-3\">\n            <button\n              type=\"button\"\n              onClick={cancelData}\n              className=\"btn btn\"\n              style={{ background: '#d04545', color: 'white' }}\n            >\n              Abbrechen\n            </button>\n            &nbsp; &nbsp;\n            <button\n              onClick={saveData}\n              type=\"button\"\n              style={{ background: '#0b5995', color: 'white' }}\n              className=\"btn btn\"\n            >\n              Speichern\n            </button>\n          </div>\n          <br />\n          <ToastContainer />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(Bills)\n"],"names":["_ref","onChange","selected","placeholderText","_jsx","children","DatePicker","className","date","day","getDate","month","getMonth","year","getFullYear","toString","padStart","parsedDate","Date","dateFormat","Bills","_customerInfo$custome","recordData","setRecordData","useState","res","localStorage","getItem","resultt","JSON","parse","navigate","useNavigate","apiUrl","process","employeeData","setEmployeeData","customerInfo","setCustomerInfo","colleague","setColleague","invoiceDate","setInvoiceDate","deliveryDate","setDeliveryDate","product","setProduct","paymentMethod","setPaymentMethod","invoiceAmount","setInvoiceAmount","paidData","customerDelivery","alreadyPaid","setAlreadyPaid","option","value","label","optionData","useEffect","async","result","fetch","concat","_id","data","json","error","console","getRecord","response","getCustomerInfo","ok","Error","status","getEmployeeData","_jsxs","style","background","Customer","htmlFor","disabled","placeholder","Select","options","selectedOption","find","opt","name","type","e","sanitizedValue","target","replace","DatePiker","map","elem","username","readOnly","checked","onClick","stopPropagation","cancelData","removeItem","color","customer_id","method","headers","body","stringify","toast","success","ToastContainer","React"],"sourceRoot":""}