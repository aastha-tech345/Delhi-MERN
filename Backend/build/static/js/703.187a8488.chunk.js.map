{"version":3,"file":"static/js/703.187a8488.chunk.js","mappings":"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","sources":["views/customer/Date.jsx","views/customer/bills/Bills.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import PropTypes from 'prop-types'\n\n// export default function DatePicker({ onChange, value, placeholder }) {\n//   const [inputValue, setInputValue] = useState('')\n\n//   useEffect(() => {\n//     if (typeof value === 'string') {\n//       const parsedDate = new Date(value)\n//       if (!isNaN(parsedDate.getTime())) {\n//         setInputValue(formatDate(parsedDate))\n//       } else {\n//         setInputValue('')\n//       }\n//     } else if (value instanceof Date && !isNaN(value.getTime())) {\n//       setInputValue(formatDate(value))\n//     } else {\n//       setInputValue('')\n//     }\n//   }, [value])\n\n//   // const handleInputChange = (e) => {\n//   //   let inputValue = e.target?.value\n//   //   let formattedValue = ''\n\n//   //   inputValue = inputValue?.replace(/\\D/g, '')\n\n//   //   for (let i = 0; i < inputValue?.length; i++) {\n//   //     if (i === 2 || i === 4) {\n//   //       formattedValue += '.'\n//   //     }\n//   //     formattedValue += inputValue[i]\n//   //   }\n\n//   //   setInputValue(formattedValue)\n//   // }\n//   const handleInputChange = (e) => {\n//     let inputValue = e.target?.value\n//     let formattedValue = ''\n\n//     inputValue = inputValue?.replace(/\\D/g, '')\n\n//     if (inputValue?.length > 8) {\n//       inputValue = inputValue.slice(0, 8)\n//     }\n\n//     for (let i = 0; i < inputValue?.length; i++) {\n//       if (i === 2 || i === 4) {\n//         formattedValue += '.'\n//       }\n//       formattedValue += inputValue[i]\n//     }\n\n//     setInputValue(formattedValue)\n//   }\n\n//   const handleDateChange = (e) => {\n//     const parts = inputValue?.split('.')?.map((part) => parseInt(part, 10))\n//     let [day, month, year] = parts\n//     if (parts?.length === 3) {\n//       if (year < 100) {\n//         year += 1900\n//       } else if (year >= 2000 && year <= new Date().getFullYear()) {\n//       } else {\n//         year = year\n//       }\n\n//       const newDate = new Date(year, month - 1, day)\n//       onChange(newDate)\n//     } else if (parts?.length === 1) {\n//       const year = parts[0]\n//       if (year < 100) {\n//         let fullYear\n//         if (year < 50) {\n//           fullYear = year + 2000\n//         } else {\n//           fullYear = year + 1900\n//         }\n//         const newDate = new Date(fullYear, 0, 1)\n//         onChange(newDate)\n//       }\n//     }\n//   }\n\n//   const formatDate = (date) => {\n//     const day = date?.getDate()?.toString()?.padStart(2, '0')\n//     const month = (date?.getMonth() + 1)?.toString()?.padStart(2, '0')\n//     const year = date?.getFullYear()?.toString()\n//     return `${day}.${month}.${year}`\n//   }\n\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         onChange={handleInputChange}\n//         onBlur={handleDateChange}\n//         value={inputValue}\n//         placeholder={placeholder}\n//         className=\"form-control\"\n//       />\n//     </div>\n//   )\n// }\n\n// DatePicker.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   value: PropTypes.instanceOf(Date).isRequired,\n//   placeholder: PropTypes.string.isRequired,\n// }\n\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function DatePicker({ onChange, value, placeholder, className }) {\n  const [inputValue, setInputValue] = useState('')\n\n  useEffect(() => {\n    if (typeof value === 'string') {\n      const parsedDate = new Date(value)\n      if (!isNaN(parsedDate.getTime())) {\n        setInputValue(formatDate(parsedDate))\n      } else {\n        setInputValue('')\n      }\n    } else if (value instanceof Date && !isNaN(value.getTime())) {\n      setInputValue(formatDate(value))\n    } else {\n      setInputValue('')\n    }\n  }, [value])\n\n  const handleInputChange = (e) => {\n    let inputValue = e.target?.value\n    let formattedValue = ''\n\n    inputValue = inputValue?.replace(/\\D/g, '')\n\n    if (inputValue?.length > 8) {\n      inputValue = inputValue.slice(0, 8)\n    }\n\n    for (let i = 0; i < inputValue?.length; i++) {\n      if (i === 2 || i === 4) {\n        formattedValue += '.'\n      }\n      formattedValue += inputValue[i]\n    }\n\n    setInputValue(formattedValue)\n  }\n\n  const handleDateChange = (e) => {\n    const parts = inputValue?.split('.')?.map((part) => parseInt(part, 10))\n    let [day, month, year] = parts\n\n    if (parts?.length === 3) {\n      if (year < 100) {\n        year += 1900\n      }\n\n      if (month < 1) month = 1\n      if (month > 12) month = 12\n\n      const maxDays = new Date(year, month, 0).getDate()\n      if (day < 1) day = 1\n      if (day > maxDays) day = maxDays\n\n      const newDate = new Date(year, month - 1, day)\n      onChange(newDate)\n    } else if (parts?.length === 1) {\n      const year = parts[0]\n      if (year < 100) {\n        let fullYear\n        if (year < 50) {\n          fullYear = year + 2000\n        } else {\n          fullYear = year + 1900\n        }\n        const newDate = new Date(fullYear, 0, 1)\n        onChange(newDate)\n      }\n    }\n  }\n\n  const formatDate = (date) => {\n    const day = date?.getDate()?.toString()?.padStart(2, '0')\n    const month = (date?.getMonth() + 1)?.toString()?.padStart(2, '0')\n    const year = date?.getFullYear()?.toString()\n    return `${day}.${month}.${year}`\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        onChange={handleInputChange}\n        onBlur={handleDateChange}\n        value={inputValue}\n        placeholder={placeholder}\n        className={className}\n      />\n    </div>\n  )\n}\n\nDatePicker.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.instanceOf(Date).isRequired,\n  placeholder: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n}\n","import React, { useEffect, useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Customer from '../Customer'\nimport { useNavigate } from 'react-router-dom'\nimport Select from 'react-select'\nimport DatePiker from '../Date'\n\nconst Bills = () => {\n  const [recordData, setRecordData] = useState([])\n  let res = localStorage.getItem('customerRecord')\n  let resultt = JSON.parse(res)\n  const navigate = useNavigate()\n  const apiUrl = process.env.REACT_APP_API_URL\n  const [employeeData, setEmployeeData] = useState([])\n  const [customerInfo, setCustomerInfo] = useState([])\n  const [colleague, setColleague] = useState(recordData?.colleague)\n  const [invoiceDate, setInvoiceDate] = useState(recordData?.invoiceDate)\n  const [deliveryDate, setDeliveryDate] = useState(recordData?.deliveryDate)\n  const [product, setProduct] = useState(recordData?.product)\n  const [incoming_payment, setIncomingPayment] = useState('')\n  const [paymentMethod, setPaymentMethod] = useState(recordData?.paymentMethod)\n  const [invoiceAmount, setInvoiceAmount] = useState(recordData?.invoiceAmount)\n  const [transaction_no, setTransactionNo] = useState()\n  const [paidData, setPaidData] = useState(customerInfo?.customerDelivery?.alreadyPaid)\n  console.log('paidData', paidData)\n  useEffect(() => {\n    setPaidData(customerInfo?.customerDelivery?.alreadyPaid)\n  }, [customerInfo?.customerDelivery?.alreadyPaid])\n\n  const alreadypaidChange = (e) => {\n    setPaidData(e.target.checked)\n  }\n\n  const invoiceChange = (e) => {\n    setInvoiceDate(e)\n  }\n\n  const deliveryDateChange = (date) => {\n    setDeliveryDate(date)\n  }\n\n  const cancelData = () => {\n    localStorage.removeItem('customerRecord')\n    navigate('/customer/customer_info')\n  }\n\n  const handlePaymentChange = (selectedOption) => {\n    setPaymentMethod(selectedOption?.value || '')\n  }\n\n  // const saveData = async () => {\n  //   try {\n  //     const invoice_data = {\n  //       product,\n  //       paymentMethod,\n  //       invoiceAmount,\n  //       invoiceDate,\n  //       deliveryDate,\n  //       employeeData,\n  //       colleague,\n  //       transaction_no,\n  //       incoming_payment,\n  //       customer_id: resultt?._id,\n  //     }\n\n  //     let response\n\n  //     // Call the invoice API if invoice_data is present\n  //     if (invoice_data) {\n  //       response = await fetch(`${apiUrl}/invoice/get_invoice/${resultt?._id}`, {\n  //         method: 'PUT',\n  //         headers: {\n  //           'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify(invoice_data),\n  //       })\n  //       if (!response.ok) {\n  //         throw new Error(`HTTP error! Status: ${response.status}`)\n  //       }\n  //     }\n\n  //     // if (paidData) {\n  //     //   response = await fetch(`${apiUrl}/customer/get_record/edit/${resultt?._id}`, {\n  //     //     method: 'PUT',\n  //     //     headers: {\n  //     //       'Content-Type': 'application/json',\n  //     //     },\n  //     //     body: JSON.stringify(paidData),\n  //     //   })\n  //     //   if (!response.ok) {\n  //     //     throw new Error(`HTTP error! Status: ${response.status}`)\n  //     //   }\n  //     // }\n\n  //     const responseData = await response.json()\n  //     console.log('first', responseData)\n  //     toast.success('Rechnungsdaten erfolgreich gespeichert')\n  //   } catch (error) {\n  //     toast.error('Bitte füllen Sie alle Angaben aus')\n  //   }\n  // }\n  const saveData = async () => {\n    try {\n      const invoice_data = {\n        product,\n        paymentMethod,\n        invoiceAmount,\n        invoiceDate,\n        deliveryDate,\n        employeeData,\n        colleague,\n        transaction_no,\n        incoming_payment,\n        customer_id: resultt?._id,\n      }\n\n      if (invoice_data) {\n        const response = await fetch(`${apiUrl}/invoice/get_invoice/${resultt?._id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(invoice_data),\n        })\n\n        if (!response.ok) {\n          throw new Error(`Failed to update invoice data. Status: ${response.status}`)\n        }\n      }\n\n      const customerDeliveryData = {\n        alreadyPaid: paidData,\n      }\n\n      console.log('customerDeliveryData:', customerDeliveryData)\n\n      const customerResponse = await fetch(`${apiUrl}/customer/get_record/edit/${resultt?._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ customerDelivery: customerDeliveryData }),\n      })\n\n      if (!customerResponse.ok) {\n        throw new Error(`Failed to update alreadyPaid data. Status: ${customerResponse.status}`)\n      }\n\n      const responseData = await customerResponse.json()\n      console.log('Response:', responseData)\n\n      toast.success('Data saved successfully')\n    } catch (error) {\n      toast.error(`Failed to save data: ${error.message}`)\n    }\n  }\n\n  const option = [\n    { value: 'payPal', label: 'PayPal' },\n    { value: 'barzahlung', label: 'Barzahlung' },\n    { value: 'rechnung', label: 'Rechnung' },\n    { value: 'klarna', label: 'Klarna' },\n    { value: 'kreditkarte', label: 'Kreditkarte (für die Zukunft)' },\n    { value: 'andere', label: 'Andere' },\n  ]\n\n  const optionData = [\n    { value: 'HVD-PV', label: 'HVD-PV' },\n    { value: 'Vortrag', label: 'Vortrag' },\n    { value: 'SPV', label: 'SPV' },\n    { value: 'OPV', label: 'OPV' },\n  ]\n\n  const getEmployeeData = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/user/get/employeeData`)\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`)\n      }\n      const { data } = await response.json()\n      setEmployeeData(data)\n    } catch (error) {\n      console.error('Error fetching employee data:', error)\n    }\n  }\n  const getCustomerInfo = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/customer/get_record/${resultt._id}`)\n\n      const data = await response.json()\n      // console.log('data', data)\n      setCustomerInfo(data)\n    } catch (error) {\n      console.error('Error fetching employee data:', error)\n    }\n  }\n\n  const getRecord = async () => {\n    try {\n      const result = await fetch(`${apiUrl}/invoice/get_invoice/${resultt._id}`)\n      const data = await result.json()\n      setRecordData(data)\n    } catch (error) {\n      console.error('Error fetching customer record:', error)\n    }\n  }\n  // console.log('recorddata', recordData)\n  // console.log('first', customerInfo?.customerDelivery?.alreadyPaid)\n  useEffect(() => {\n    getRecord()\n    getCustomerInfo()\n    getEmployeeData()\n    // setAlreadyPaid()\n  }, [])\n\n  useEffect(() => {\n    setColleague(recordData?.colleague)\n    setInvoiceDate(recordData?.invoiceDate)\n    setDeliveryDate(recordData?.deliveryDate)\n    setProduct(recordData?.product)\n    setPaymentMethod(recordData?.paymentMethod)\n    setInvoiceAmount(recordData?.invoiceAmount)\n    setIncomingPayment(recordData?.incoming_payment)\n    setTransactionNo(recordData?.transaction_no)\n  }, [recordData])\n  // useEffect(() => {\n  //   if (incoming_payment && incoming_payment.length !== 0) {\n  //     setAlreadyPaid(true)\n  //   } else {\n  //     setAlreadyPaid(paidData === true)\n  //   }\n  // }, [incoming_payment, paidData])\n\n  return (\n    <div className=\"inner-page-wrap\">\n      <div style={{ background: '#fff' }}>\n        <Customer />\n        <div className=\"tab-content\">\n          <div className=\"tab-title\">\n            <h4 className=\"mx-3\">Rechnung</h4>\n          </div>\n          <hr className=\"mx-3\" />\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <div className=\"block-wrap\">\n                  {/* <h3>Rechnungstellung</h3> */}\n                  <div className=\"container-fluid\">\n                    <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                        <div className=\"row\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Transaktionsnr\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              className=\"form-control\"\n                              value={transaction_no}\n                              onChange={(e) => {\n                                setTransactionNo(e.target.value)\n                              }}\n                              disabled\n                              placeholder=\"Transaktionsnr\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-sm-6\">\n                        <div className=\"row\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Zahlungseingang\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              className=\"form-control\"\n                              placeholder=\"Zahlungseingang\"\n                              value={incoming_payment}\n                              onChange={(e) => {\n                                setIncomingPayment(e.target.value)\n                              }}\n                              disabled={paymentMethod !== 'barzahlung'}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                        <div className=\"row mb-3\">\n                          <label htmlFor=\"product\" className=\"col-sm-4 col-form-label\">\n                            Produkt\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              options={optionData}\n                              onChange={(selectedOption) => setProduct(selectedOption?.value || '')}\n                              value={optionData.find((opt) => opt.value === product)}\n                              name=\"product\"\n                              placeholder=\"HVD-PV\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row\">\n                          <label htmlFor=\"invoiceAmount\" className=\"col-sm-4 col-form-label\">\n                            Rechnungsbetrag eintragen\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <input\n                              type=\"text\"\n                              placeholder=\"Rechnungsbetrag eintragen\"\n                              className=\"form-control\"\n                              name=\"invoiceAmount\"\n                              value={invoiceAmount}\n                              onChange={(e) => {\n                                const value = e.target.value\n                                const sanitizedValue = value.replace(/\\D/g, '')\n                                setInvoiceAmount(sanitizedValue)\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"invoiceDate\" className=\"col-sm-4 col-form-label\">\n                            Rechnungsdatum\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <DatePiker\n                              value={invoiceDate}\n                              onChange={invoiceChange}\n                              placeholder=\"Rechnungsdatum\"\n                              className=\"form-control\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"colleague\" className=\"col-sm-4 col-form-label\">\n                            MitarbeiterInnen\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              placeholder=\"MitarbeiterInnen\"\n                              options={\n                                employeeData?.map((elem) => ({\n                                  value: elem.username,\n                                  label: elem.username,\n                                })) || []\n                              }\n                              onChange={(selectedOption) =>\n                                setColleague(selectedOption?.value || '')\n                              }\n                              value={{\n                                value: colleague || 'MitarbeiterInnen',\n                                label: colleague || 'MitarbeiterInnen',\n                              }}\n                              name=\"colleague\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col-sm-6\">\n                        {/* <div className=\"mb-6 row\">\n                          <label htmlFor=\"alreadyPaid\" className=\"col-sm-4 col-form-label\">\n                            Bereits bezahlt\n                          </label>\n                          <div className=\"col-sm-6 radio-check-wrap\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"alreadyPaid\"\n                              checked={alreadyPaid}\n                              onChange={(e) => setAlreadyPaid(e.target.checked)}\n                            />\n                          </div>\n                        </div> */}\n                        <div className=\"mb-6 row\">\n                          <label htmlFor=\"alreadyPaid\" className=\"col-sm-4 mb-2 col-form-label\">\n                            Bereits bezahlt\n                          </label>\n                          <div className=\"col-sm-6 radio-check-wrap\">\n                            <input\n                              readOnly\n                              type=\"checkbox\"\n                              name=\"alreadyPaid\"\n                              checked={paidData}\n                              onChange={alreadypaidChange}\n                              onClick={(e) => e.stopPropagation()}\n                            />\n                            <span></span>\n                          </div>\n                        </div>\n                        <div className=\"row mb-3\">\n                          <label htmlFor=\"paymentMethod\" className=\"col-sm-4 col-form-label\">\n                            Zahlungsart\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <Select\n                              className=\"w-100\"\n                              options={option}\n                              onChange={handlePaymentChange}\n                              value={option.find((opt) => opt.value === paymentMethod)}\n                              name=\"paymentMethod\"\n                              placeholder=\"Barzahlung\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"row\">\n                          <label htmlFor=\"deliveryDate\" className=\"col-sm-4 col-form-label\">\n                            Lieferdatum\n                          </label>\n                          <div className=\"col-sm-6\">\n                            <DatePiker\n                              value={deliveryDate}\n                              onChange={deliveryDateChange}\n                              placeholder=\"Lieferdatum\"\n                              className=\"form-control\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-end mx-3\">\n            <button\n              type=\"button\"\n              onClick={cancelData}\n              className=\"btn btn\"\n              style={{ background: '#d04545', color: 'white' }}\n            >\n              Abbrechen\n            </button>\n            &nbsp; &nbsp;\n            <button\n              onClick={saveData}\n              type=\"button\"\n              style={{ background: '#0b5995', color: 'white' }}\n              className=\"btn btn\"\n            >\n              Speichern\n            </button>\n          </div>\n          <br />\n          <ToastContainer />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(Bills)\n"],"names":["DatePicker","_ref","onChange","value","placeholder","className","inputValue","setInputValue","useState","useEffect","parsedDate","Date","isNaN","getTime","formatDate","date","_date$getDate","_date$getDate$toStrin","_ref2","_ref2$toString","_date$getFullYear","day","getDate","toString","padStart","month","getMonth","year","getFullYear","concat","_jsx","children","type","e","_e$target","_inputValue","_inputValue2","target","formattedValue","replace","length","slice","i","_inputValue3","onBlur","_inputValue$split","parts","split","map","part","parseInt","maxDays","newDate","fullYear","Bills","_customerInfo$custome","_customerInfo$custome3","recordData","setRecordData","res","localStorage","getItem","resultt","JSON","parse","navigate","useNavigate","apiUrl","process","employeeData","setEmployeeData","customerInfo","setCustomerInfo","colleague","setColleague","invoiceDate","setInvoiceDate","deliveryDate","setDeliveryDate","product","setProduct","incoming_payment","setIncomingPayment","paymentMethod","setPaymentMethod","invoiceAmount","setInvoiceAmount","transaction_no","setTransactionNo","paidData","setPaidData","customerDelivery","alreadyPaid","console","log","_customerInfo$custome2","option","label","optionData","async","result","fetch","_id","data","json","error","getRecord","response","getCustomerInfo","ok","Error","status","getEmployeeData","_jsxs","style","background","Customer","htmlFor","disabled","Select","options","selectedOption","find","opt","name","sanitizedValue","DatePiker","elem","username","readOnly","checked","onClick","stopPropagation","cancelData","removeItem","color","invoice_data","customer_id","method","headers","body","stringify","customerDeliveryData","customerResponse","responseData","toast","success","message","ToastContainer","React"],"sourceRoot":""}