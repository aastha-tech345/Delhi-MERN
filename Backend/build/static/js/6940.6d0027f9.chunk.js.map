{"version":3,"file":"static/js/6940.6d0027f9.chunk.js","mappings":"0PAgCA,MAqCA,EArCkBA,IAA8C,IAA7C,SAAEC,EAAQ,SAAEC,EAAQ,gBAAEC,GAAiBH,EAwBxD,OACEI,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACE,IAAU,CACTC,UAAU,yCACVJ,gBAAiBA,EACjBD,SAAUA,EACVD,SAvBoBO,IACxB,IAAIC,EAAMD,EAAKE,UACXC,EAAQH,EAAKI,WAAa,EAC1BC,EAAOL,EAAKM,cAEhB,GAAID,EAAO,KAAQA,EAAO,KAExB,YADAE,QAAQC,MAAM,gDAIhBP,EAAMA,EAAIQ,WAAWC,SAAS,EAAG,KACjCP,EAAQA,EAAMM,WAAWC,SAAS,EAAG,KAErC,MAAMC,EAAa,IAAIC,KAAK,GAADC,OAAIR,EAAI,KAAAQ,OAAIV,EAAK,KAAAU,OAAIZ,IAChDR,EAASkB,EAAW,EAUhBG,WAAW,gBAET,C","sources":["views/customer/Date.jsx"],"sourcesContent":["// import React from 'react'\n// import DatePicker from 'react-datepicker'\n// import 'react-datepicker/dist/react-datepicker.css'\n// import PropTypes from 'prop-types'\n\n// const DatePiker = ({ onChange, selected, placeholderText }) => {\n//   DatePiker.propTypes = {\n//     onChange: PropTypes.func.isRequired,\n//     selected: PropTypes.func.isRequired,\n//     placeholderText: PropTypes.func.isRequired,\n//   }\n\n//   return (\n//     <div>\n//       <DatePicker\n//         className=\"form-control form-search-control w-101\"\n//         placeholderText={placeholderText}\n//         selected={selected}\n//         onChange={onChange}\n//         dateFormat=\"dd.MM.yyyy\"\n//       />\n//     </div>\n//   )\n// }\n\n// export default DatePiker\n\nimport React from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport PropTypes from 'prop-types'\n\nconst DatePiker = ({ onChange, selected, placeholderText }) => {\n  DatePiker.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    selected: PropTypes.instanceOf(Date).isRequired,\n    placeholderText: PropTypes.string.isRequired,\n  }\n\n  const handleDateChange = (date) => {\n    let day = date.getDate()\n    let month = date.getMonth() + 1\n    let year = date.getFullYear()\n\n    if (year < 1000 || year > 9999) {\n      console.error('Invalid year. Year must consist of 4 digits.')\n      return\n    }\n\n    day = day.toString().padStart(2, '0')\n    month = month.toString().padStart(2, '0')\n\n    const parsedDate = new Date(`${year}.${month}.${day}`)\n    onChange(parsedDate)\n  }\n\n  return (\n    <div>\n      <DatePicker\n        className=\"form-control form-search-control w-101\"\n        placeholderText={placeholderText}\n        selected={selected}\n        onChange={handleDateChange}\n        dateFormat=\"dd.MM.yyyy\"\n      />\n    </div>\n  )\n}\n\nexport default DatePiker\n\n//mui date piker\n\n// import React from 'react'\n// import PropTypes from 'prop-types'\n// import { DatePicker } from '@mui/x-date-pickers/DatePicker'\n// import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\n// import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'\n\n// export default function DatePiker({ onChange, selected, placeholderText }) {\n// const handleDateChange = (date) => {\n//   let day = date.getDate()\n//   let month = date.getMonth() + 1\n//   let year = date.getFullYear() % 100\n\n//   year += year < 50 ? 2000 : 1900\n//   day = day.toString().padStart(2, '0')\n//   month = month.toString().padStart(2, '0')\n//   const parsedDate = new Date(year, month - 1, day)\n\n//   onChange(parsedDate)\n// }\n\n//   return (\n//     <LocalizationProvider dateAdapter={AdapterDayjs}>\n//       <DatePicker\n//         label=\"name\"\n//         format=\"DD.MM.YYYY\"\n//         value={selected}\n//         onChange={handleDateChange}\n//         name=\"startDate\"\n//         renderInput={(params) => <input {...params} placeholder={placeholderText} />}\n//       />\n//     </LocalizationProvider>\n//   )\n// }\n\n// DatePiker.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   selected: PropTypes.instanceOf(Date).isRequired,\n//   placeholderText: PropTypes.string.isRequired,\n// }\n\n//ant design\n\n// import React from 'react'\n// import PropTypes from 'prop-types'\n// import { DatePicker, Space } from 'antd'\n// import moment from 'moment'\n\n// export default function DatePiker({ onChange, selected, placeholder }) {\n//   const handleDateChange = (date) => {\n//     if (date && moment.isMoment(date) && date.isValid()) {\n//       onChange(date.format('YYYY-MM-DD'))\n//     } else {\n//       onChange(null)\n//     }\n//     // onChange(date)\n//   }\n\n//   return (\n//     <div>\n//       <Space direction=\"vertical\">\n//         <DatePicker\n//           // format={{\n//           //   format: 'DD.MM.YYYY',\n//           //   type: 'mask',\n//           // }}\n//           format={{\n//             format: 'YYYY-MM-DD',\n//             type: 'mask',\n//           }}\n//           onChange={handleDateChange}\n//           // value={selected}\n//           value={selected ? moment(selected, 'YYYY-MM-DD') : null}\n//           // placeholder={placeholder}\n//           // className=\"form-control w-100\"\n//         />\n//       </Space>\n//     </div>\n//   )\n// }\n\n// DatePiker.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   selected: PropTypes.string,\n//   placeholder: PropTypes.string.isRequired,\n// }\n// DatePiker.defaultProps = {\n//   placeholder: 'Geburtsdatum',\n// }\n"],"names":["_ref","onChange","selected","placeholderText","_jsx","children","DatePicker","className","date","day","getDate","month","getMonth","year","getFullYear","console","error","toString","padStart","parsedDate","Date","concat","dateFormat"],"sourceRoot":""}