{"version":3,"file":"static/js/264.4ec9ef00.chunk.js","mappings":"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","sources":["views/settings/filter/Filter.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { Divider, Table } from 'antd'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport { GrEdit } from 'react-icons/gr'\nimport { MdDelete, MdAdd } from 'react-icons/md'\nimport { BiFilterAlt } from 'react-icons/bi'\nimport { AiOutlineMail } from 'react-icons/ai'\nimport { BiErrorCircle } from 'react-icons/bi'\nimport Pagination from '@mui/material/Pagination'\nimport Stack from '@mui/material/Stack'\n\nconst columns = [\n  {\n    title: 'NACHNAME',\n    dataIndex: 'fname',\n    render: (text) => <a>{text}</a>,\n  },\n  {\n    title: 'VORNAMEN',\n    dataIndex: 'lname',\n  },\n  {\n    title: 'GEBURTSDATUM',\n    dataIndex: 'dob',\n  },\n  {\n    title: 'PLZ',\n    dataIndex: 'plz',\n  },\n  {\n    title: 'TELEFON',\n    dataIndex: 'telephone',\n  },\n  {\n    title: 'MOBIL',\n    dataIndex: 'mobil',\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n  },\n  {\n    title: 'ID KLIENTINNEN',\n    dataIndex: 'client_id',\n  },\n  {\n    title: 'VERSAND NACHSTE MARKE',\n    dataIndex: 'next_shipping',\n  },\n  {\n    title: 'DAUERSPENDERINNEN',\n    dataIndex: 'permanent_donors',\n  },\n]\n\nconst data = [\n  {\n    key: '1',\n    name: 'Russell Crowe',\n    email: 'russellcrowe@left4code.com',\n    status: 'done',\n    phone: '+3 809 291 4525',\n    action: 'active',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    email: 'user@gmail.com',\n    status: 'done',\n    phone: '2934289354',\n    action: 'active',\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    email: 'user@gmail.com',\n    status: 'done',\n    phone: '2934289354',\n    action: 'active',\n  },\n  {\n    key: '4',\n    name: 'Disabled User',\n    email: 'user@gmail.com',\n    status: 'done',\n    phone: '2934289354',\n    action: 'active',\n  },\n]\n\nconst Filter = () => {\n  const [search, setSearch] = useState('')\n  const [show, setShow] = useState(false)\n  const [error, setError] = useState(false)\n  const [filterRecord, setFilterRecord] = useState([])\n  const apiUrl = process.env.REACT_APP_API_URL\n  const [page, setPage] = useState(1)\n  const [countPage, setCountPage] = useState(0)\n  const searchInputRef = useRef()\n  const handleClose = () => setShow(false)\n  const handleShow = () => setShow(true)\n  const [selectionType] = useState('checkbox')\n\n  const getDetails = async () => {\n    try {\n      const result = await fetch(`${apiUrl}/filter/get_filter?page=${page}`)\n      const data = await result.json()\n      setCountPage(data?.pageCount)\n      const activeRecords = data?.result?.filter((record) => record.status === 'active')\n      setFilterRecord(activeRecords)\n    } catch (error) {\n      console.error('Error fetching customer record:', error)\n    }\n  }\n  const handlePageChange = (event, value) => {\n    setPage(value)\n  }\n  // console.log('aastha', filterRecord)\n  useEffect(() => {\n    getDetails()\n  }, [page])\n\n  const searchHandle = async () => {\n    try {\n      if (search === '') {\n        return getDetails()\n      }\n\n      const response = await fetch(`${apiUrl}/filter/search/${search}`)\n      const data = await response.json()\n\n      const activeRecords = data.filter((record) => record.status === 'active')\n\n      if (activeRecords.length > 0) {\n        setFilterRecord(activeRecords)\n      } else {\n        getDetails()\n        setFilterRecord(data)\n      }\n    } catch (error) {\n      console.error('Error searching data:', error.message)\n    }\n  }\n\n  return (\n    <div style={{ background: 'white', borderRadius: '5px' }}>\n      <h4 className=\"px-3 pt-3\">Filter</h4>\n      <hr />\n      <div className=\"m-2\">\n        <div\n          className=\"row m-3 p-3\"\n          style={{ border: '1px solid lightgray', borderRadius: '5px ' }}\n        >\n          <div className=\"col-sm-3\">\n            <input\n              ref={searchInputRef}\n              name=\"search\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              type=\"search\"\n              id=\"form1\"\n              placeholder=\"Ihre Suche eingeben\"\n              className=\"form-control\"\n            />\n          </div>\n          <div className=\"col-sm-3\">\n            <button\n              className=\"btn btn text-light\"\n              onClick={searchHandle}\n              style={{ background: '#0b5995' }}\n            >\n              <BiFilterAlt />\n              &nbsp; Filter\n            </button>\n          </div>\n\n          <div className=\"col-sm-6 text-right\">\n            {/* <button\n              className=\"btn btn\"\n              style={{ background: '#0b5995', color: 'white', marginLeft: '30px' }}\n            >\n              <AiOutlineMail />\n              &nbsp; Einladung versenden\n            </button>{' '}\n            &nbsp;&nbsp;\n            <button\n              className=\"btn btn\"\n              style={{ background: '#0b5995', color: 'white' }}\n              onClick={handleShow}\n            >\n              <MdAdd />\n              &nbsp;Neuen Kunden anlegen\n            </button>\n            <Modal show={show} onHide={handleClose} centered>\n              <Modal.Header closeButton>\n                <Modal.Title>Kontakt hinzuf√ºgen</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <div className=\"row p-3\">\n                  <div className=\"mb-2 row\">\n                    <label htmlFor=\"inputPassword\" className=\"col-sm-3 col-form-label\">\n                      Vorname\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <input\n                        type=\"text\"\n                        value={fname}\n                        onChange={(e) => {\n                          setFname(e.target.value)\n                        }}\n                        placeholder=\"jo\"\n                        className=\"form-control\"\n                        id=\"inputPassword\"\n                      />\n                      {error && fname.trim().length === 0 && (\n                        <p style={{ color: 'red' }}>\n                          <BiErrorCircle /> required\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mb-2 row\">\n                    <label htmlFor=\"inputPassword\" className=\"col-sm-3 col-form-label\">\n                      Nachname\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <input\n                        type=\"text\"\n                        value={lname}\n                        onChange={(e) => {\n                          setLname(e.target.value)\n                        }}\n                        placeholder=\"verma\"\n                        className=\"form-control\"\n                        id=\"inputPassword\"\n                      />\n                      {error && lname.trim().length === 0 && (\n                        <p style={{ color: 'red' }}>\n                          <BiErrorCircle /> required\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mb-2 row\">\n                    <label htmlFor=\"inputPassword\" className=\"col-sm-3 col-form-label\">\n                      Telefon\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <input\n                        type=\"number\"\n                        value={phone}\n                        onChange={(e) => {\n                          setPhone(e.target.value)\n                        }}\n                        placeholder=\"91+ 8354568464\"\n                        className=\"form-control\"\n                        id=\"inputPassword\"\n                      />\n                      {error && phone.trim().length === 0 && (\n                        <p style={{ color: 'red' }}>\n                          <BiErrorCircle /> required\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mb-2 row\">\n                    <label htmlFor=\"inputPassword\" className=\"col-sm-3 col-form-label\">\n                      Mail\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <input\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => {\n                          setEmail(e.target.value)\n                        }}\n                        placeholder=\"jo@gmail.com\"\n                        className=\"form-control\"\n                        id=\"inputPassword\"\n                      />\n                      {error && email.trim().length === 0 && (\n                        <p style={{ color: 'red' }}>\n                          <BiErrorCircle /> required\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mb-2 row\">\n                    <label htmlFor=\"inputPassword\" className=\"col-sm-3 col-form-label\">\n                      Skype\n                    </label>\n                    <div className=\"col-sm-9\">\n                      <input\n                        type=\"text\"\n                        value={skype}\n                        onChange={(e) => {\n                          setSkype(e.target.value)\n                        }}\n                        placeholder=\"Skype\"\n                        className=\"form-control\"\n                        id=\"inputPassword\"\n                      />\n                      {error && skype.trim().length === 0 && (\n                        <p style={{ color: 'red' }}>\n                          <BiErrorCircle /> Required\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mb-2 row\">\n                    <label htmlFor=\"inputPassword\" className=\"col-sm-3 col-form-label\">\n                      Geschlecht\n                    </label>\n                    {error && gender.trim().length === 0 && (\n                      <p style={{ color: 'red' }}>\n                        <BiErrorCircle /> required\n                      </p>\n                    )}\n                    <div className=\"col-sm-9\">\n                      <input\n                        type=\"radio\"\n                        name=\"gender\"\n                        value=\"male\"\n                        onChange={(e) => {\n                          setGender(e.target.value)\n                        }}\n                      />{' '}\n                      &nbsp; M√§nnlich\n                      <input\n                        type=\"radio\"\n                        name=\"gender\"\n                        value=\"female\"\n                        onChange={(e) => {\n                          setGender(e.target.value)\n                        }}\n                      />{' '}\n                      &nbsp; Weiblich\n                      <input\n                        type=\"radio\"\n                        name=\"gender\"\n                        value=\"other\"\n                        onChange={(e) => {\n                          setGender(e.target.value)\n                        }}\n                      />\n                      &nbsp; Andere\n                    </div>\n                  </div>\n                </div>\n              </Modal.Body>\n              <Modal.Footer>\n                <button\n                  className=\"btn btn\"\n                  onClick={handleClose}\n                  style={{ background: '#d04545', color: 'white' }}\n                >\n                  {' '}\n                  Abbrechen\n                </button>\n                &nbsp; &nbsp;\n                <button\n                  className=\"btn btn\"\n                  onClick={saveData}\n                  style={{ background: '#0b5995', color: 'white' }}\n                >\n                  Aktivit√§t hinzuf√ºgen\n                </button>\n              </Modal.Footer>\n            </Modal>{' '} */}\n          </div>\n        </div>\n        <div className=\"m-3\">\n          <Table\n            rowKey={(record) => record._id}\n            rowSelection={{\n              type: 'checkbox',\n              onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows)\n              },\n              getCheckboxProps: (record) => ({\n                disabled: record.name === 'Disabled User',\n                name: record.name,\n              }),\n            }}\n            style={{ overflowX: 'auto' }}\n            columns={columns}\n            dataSource={filterRecord}\n            pagination={false}\n          />\n          <Stack spacing={2}>\n            <Pagination\n              count={countPage}\n              variant=\"outlined\"\n              shape=\"rounded\"\n              page={page}\n              onChange={handlePageChange}\n            />\n          </Stack>\n          <br />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(Filter)\n"],"names":["columns","title","dataIndex","render","text","_jsx","children","Filter","search","setSearch","useState","show","setShow","error","setError","filterRecord","setFilterRecord","apiUrl","process","page","setPage","countPage","setCountPage","searchInputRef","useRef","selectionType","getDetails","async","_data$result","result","fetch","concat","data","json","pageCount","activeRecords","filter","record","status","console","useEffect","_jsxs","style","background","borderRadius","className","border","ref","name","value","onChange","e","target","type","id","placeholder","onClick","response","length","message","BiFilterAlt","Table","rowKey","_id","rowSelection","selectedRowKeys","selectedRows","log","getCheckboxProps","disabled","overflowX","dataSource","pagination","Stack","spacing","Pagination","count","variant","shape","handlePageChange","event","React"],"sourceRoot":""}