{"version":3,"file":"static/js/940.95cd1157.chunk.js","mappings":"4NAqKe,SAASA,EAAOC,GAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,YAAEC,GAAaH,EAC9D,MAAOI,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KAE7CC,EAAAA,EAAAA,YAAU,KACR,GAAIL,aAAiBM,OAASC,MAAMP,EAAMQ,WACxCL,EAAcM,EAAWT,SACpB,GAAqB,kBAAVA,EAAoB,CACpC,MAAMU,EAAO,IAAIJ,KAAKN,GACtBG,EAAcM,EAAWC,GAC3B,MACEP,EAAc,GAChB,GACC,CAACH,IAEJ,MA4CMS,EAAcC,IAAU,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAC3B,MAAMC,EAAU,OAAJN,QAAI,IAAJA,GAAe,QAAXC,EAAJD,EAAMO,iBAAS,IAAAN,GAAY,QAAZC,EAAfD,EAAiBO,kBAAU,IAAAN,OAAvB,EAAJA,EAA6BO,SAAS,EAAG,KAC/CC,EAA6B,QAAxBP,GAAQ,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMW,YAAa,SAAC,IAAAR,GAAa,QAAbC,EAArBD,EAAwBK,kBAAU,IAAAJ,OAAb,EAArBA,EAAoCK,SAAS,EAAG,KACxDG,EAAW,OAAJZ,QAAI,IAAJA,GAAmB,QAAfK,EAAJL,EAAMa,qBAAa,IAAAR,OAAf,EAAJA,EAAqBG,WAClC,MAAM,GAANM,OAAUR,EAAG,KAAAQ,OAAIJ,EAAK,KAAAI,OAAIF,EAAI,EAGhC,OACEG,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACL5B,SAvDqB6B,IAAO,IAADC,EAAAC,EAC/B,IAAI5B,EAAqB,QAAX2B,EAAGD,EAAEG,cAAM,IAAAF,OAAA,EAARA,EAAU7B,MACvBgC,EAAiB,GAErB9B,EAAuB,QAAb4B,EAAG5B,SAAU,IAAA4B,OAAA,EAAVA,EAAYG,QAAQ,MAAO,IAExC,IAAK,IAAIC,EAAI,EAAGA,GAAc,QAAbC,EAAGjC,SAAU,IAAAiC,OAAA,EAAVA,EAAYC,QAAQF,IAAK,CAAC,IAADC,EACjC,IAAND,GAAiB,IAANA,IACbF,GAAkB,KAEpBA,GAAkB9B,EAAWgC,EAC/B,CAEA/B,EAAc6B,EAAe,EA2CzBK,OAxCoBT,IAAO,IAADU,EAC9B,MAAMC,EAAkB,OAAVrC,QAAU,IAAVA,GAAsB,QAAZoC,EAAVpC,EAAYsC,MAAM,YAAI,IAAAF,OAAZ,EAAVA,EAAwBG,KAAKC,GAASC,SAASD,EAAM,MACnE,IAAK1B,EAAKI,EAAOE,GAAQiB,EACzB,GAAsB,KAAb,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOH,QAAc,CACnBd,EAAO,IACTA,GAAQ,KACCA,GAAQ,KAAQA,IAAQ,IAAIhB,MAAOiB,gBAE5CD,GAAO,IAAIhB,MAAOiB,eAGpB,MAAMqB,EAAU,IAAItC,KAAKgB,EAAMF,EAAQ,EAAGJ,GAC1CjB,EAAS6C,EACX,MAAO,GAAsB,KAAb,OAALL,QAAK,IAALA,OAAK,EAALA,EAAOH,QAAc,CAC9B,MAAMd,EAAOiB,EAAM,GACnB,GAAIjB,EAAO,IAAK,CACd,IAAIuB,EAEFA,EADEvB,EAAO,GACEA,EAAO,IAEPA,EAAO,KAEpB,MAAMsB,EAAU,IAAItC,KAAKuC,EAAU,EAAG,GACtC9C,EAAS6C,EACX,CACF,GAgBI5C,MAAOE,EACPD,YAAaA,EACb6C,UAAU,kBAIlB,C","sources":["views/customer/Date.jsx"],"sourcesContent":["// // import React from 'react'\n// // import DatePicker from 'react-datepicker'\n// // import 'react-datepicker/dist/react-datepicker.css'\n// // import PropTypes from 'prop-types'\n\n// // const DatePiker = ({ onChange, selected, placeholderText }) => {\n// //   DatePiker.propTypes = {\n// //     onChange: PropTypes.func.isRequired,\n// //     selected: PropTypes.func.isRequired,\n// //     placeholderText: PropTypes.func.isRequired,\n// //   }\n\n// //   return (\n// //     <div>\n// //       <DatePicker\n// //         className=\"form-control form-search-control w-101\"\n// //         placeholderText={placeholderText}\n// //         selected={selected}\n// //         onChange={onChange}\n// //         dateFormat=\"dd.MM.yyyy\"\n// //       />\n// //     </div>\n// //   )\n// // }\n\n// // export default DatePiker\n\n// import React from 'react'\n// import DatePicker from 'react-datepicker'\n// import 'react-datepicker/dist/react-datepicker.css'\n// import PropTypes from 'prop-types'\n\n// const DatePiker = ({ onChange, selected, placeholderText }) => {\n//   DatePiker.propTypes = {\n//     onChange: PropTypes.func.isRequired,\n//     selected: PropTypes.instanceOf(Date).isRequired,\n//     placeholderText: PropTypes.string.isRequired,\n//   }\n\n//   const handleDateChange = (date) => {\n//     let day = date.getDate()\n//     let month = date.getMonth() + 1\n//     let year = date.getFullYear()\n\n//     if (year < 1000 || year > 9999) {\n//       console.error('Invalid year. Year must consist of 4 digits.')\n//       return\n//     }\n\n//     day = day.toString().padStart(2, '0')\n//     month = month.toString().padStart(2, '0')\n\n//     const parsedDate = new Date(`${year}.${month}.${day}`)\n//     onChange(parsedDate)\n//   }\n\n//   return (\n//     <div>\n//       <DatePicker\n//         className=\"form-control form-search-control w-101\"\n//         placeholderText={placeholderText}\n//         selected={selected}\n//         onChange={handleDateChange}\n//         dateFormat=\"dd.MM.yyyy\"\n//       />\n//     </div>\n//   )\n// }\n\n// export default DatePiker\n\n// //mui date piker\n\n// // import React from 'react'\n// // import PropTypes from 'prop-types'\n// // import { DatePicker } from '@mui/x-date-pickers/DatePicker'\n// // import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\n// // import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'\n\n// // export default function DatePiker({ onChange, selected, placeholderText }) {\n// // const handleDateChange = (date) => {\n// //   let day = date.getDate()\n// //   let month = date.getMonth() + 1\n// //   let year = date.getFullYear() % 100\n\n// //   year += year < 50 ? 2000 : 1900\n// //   day = day.toString().padStart(2, '0')\n// //   month = month.toString().padStart(2, '0')\n// //   const parsedDate = new Date(year, month - 1, day)\n\n// //   onChange(parsedDate)\n// // }\n\n// //   return (\n// //     <LocalizationProvider dateAdapter={AdapterDayjs}>\n// //       <DatePicker\n// //         label=\"name\"\n// //         format=\"DD.MM.YYYY\"\n// //         value={selected}\n// //         onChange={handleDateChange}\n// //         name=\"startDate\"\n// //         renderInput={(params) => <input {...params} placeholder={placeholderText} />}\n// //       />\n// //     </LocalizationProvider>\n// //   )\n// // }\n\n// // DatePiker.propTypes = {\n// //   onChange: PropTypes.func.isRequired,\n// //   selected: PropTypes.instanceOf(Date).isRequired,\n// //   placeholderText: PropTypes.string.isRequired,\n// // }\n\n// //ant design\n\n// // import React from 'react'\n// // import PropTypes from 'prop-types'\n// // import { DatePicker, Space } from 'antd'\n// // import moment from 'moment'\n\n// // export default function DatePiker({ onChange, selected, placeholder }) {\n// //   const handleDateChange = (date) => {\n// //     if (date && moment.isMoment(date) && date.isValid()) {\n// //       onChange(date.format('YYYY-MM-DD'))\n// //     } else {\n// //       onChange(null)\n// //     }\n// //     // onChange(date)\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Space direction=\"vertical\">\n// //         <DatePicker\n// //           // format={{\n// //           //   format: 'DD.MM.YYYY',\n// //           //   type: 'mask',\n// //           // }}\n// //           format={{\n// //             format: 'YYYY-MM-DD',\n// //             type: 'mask',\n// //           }}\n// //           onChange={handleDateChange}\n// //           // value={selected}\n// //           value={selected ? moment(selected, 'YYYY-MM-DD') : null}\n// //           // placeholder={placeholder}\n// //           // className=\"form-control w-100\"\n// //         />\n// //       </Space>\n// //     </div>\n// //   )\n// // }\n\n// // DatePiker.propTypes = {\n// //   onChange: PropTypes.func.isRequired,\n// //   selected: PropTypes.string,\n// //   placeholder: PropTypes.string.isRequired,\n// // }\n// // DatePiker.defaultProps = {\n// //   placeholder: 'Geburtsdatum',\n// //\n\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function DatePic({ onChange, value, placeholder }) {\n  const [inputValue, setInputValue] = useState('')\n\n  useEffect(() => {\n    if (value instanceof Date && !isNaN(value.getTime())) {\n      setInputValue(formatDate(value))\n    } else if (typeof value === 'string') {\n      const date = new Date(value)\n      setInputValue(formatDate(date))\n    } else {\n      setInputValue('')\n    }\n  }, [value])\n\n  const handleInputChange = (e) => {\n    let inputValue = e.target?.value\n    let formattedValue = ''\n\n    inputValue = inputValue?.replace(/\\D/g, '')\n\n    for (let i = 0; i < inputValue?.length; i++) {\n      if (i === 2 || i === 4) {\n        formattedValue += '.'\n      }\n      formattedValue += inputValue[i]\n    }\n\n    setInputValue(formattedValue)\n  }\n\n  const handleDateChange = (e) => {\n    const parts = inputValue?.split('.')?.map((part) => parseInt(part, 10))\n    let [day, month, year] = parts\n    if (parts?.length === 3) {\n      if (year < 100) {\n        year += 1900\n      } else if (year >= 2000 && year <= new Date().getFullYear()) {\n      } else {\n        year = new Date().getFullYear()\n      }\n\n      const newDate = new Date(year, month - 1, day)\n      onChange(newDate)\n    } else if (parts?.length === 1) {\n      const year = parts[0]\n      if (year < 100) {\n        let fullYear\n        if (year < 50) {\n          fullYear = year + 2000\n        } else {\n          fullYear = year + 1900\n        }\n        const newDate = new Date(fullYear, 0, 1)\n        onChange(newDate)\n      }\n    }\n  }\n\n  const formatDate = (date) => {\n    const day = date?.getDate()?.toString()?.padStart(2, '0')\n    const month = (date?.getMonth() + 1)?.toString()?.padStart(2, '0')\n    const year = date?.getFullYear()?.toString()\n    return `${day}.${month}.${year}`\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        onChange={handleInputChange}\n        onBlur={handleDateChange}\n        value={inputValue}\n        placeholder={placeholder}\n        className=\"form-control\"\n      />\n    </div>\n  )\n}\n\nDatePic.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.instanceOf(Date).isRequired,\n  placeholder: PropTypes.string.isRequired,\n}\n"],"names":["DatePic","_ref","onChange","value","placeholder","inputValue","setInputValue","useState","useEffect","Date","isNaN","getTime","formatDate","date","_date$getDate","_date$getDate$toStrin","_ref2","_ref2$toString","_date$getFullYear","day","getDate","toString","padStart","month","getMonth","year","getFullYear","concat","_jsx","children","type","e","_e$target","_inputValue","target","formattedValue","replace","i","_inputValue2","length","onBlur","_inputValue$split","parts","split","map","part","parseInt","newDate","fullYear","className"],"sourceRoot":""}